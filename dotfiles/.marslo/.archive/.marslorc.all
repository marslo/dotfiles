#!/bin/bash
# shellcheck disable=SC1090,SC2045,SC2035
# iTerm2 shell integration
test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"

USERHOME="/Users/marslo"

source ${USERHOME}/.marslo/.bello_mac
source ${USERHOME}/.marslo/.mac/.mymac_public

if which brew > /dev/null && [ -f "$(brew --prefix)/share/bash-completion/bash_completion" ]; then
  # bash-completion@2
  source "$(brew --prefix)/share/bash-completion/bash_completion";
elif [ -f /etc/bash_completion ]; then
  # bash-completion
  source "$(brew --prefix)/etc/bash_completion"
  # source /etc/bash_completion;
fi;
[ -f /usr/local/bin/screenfetch ] && /usr/local/bin/screenfetch

# source ${USERHOME}/.marslo/.scm/.public_marslo
# source ${USERHOME}/.marslo/.tmux-session
# source ${USERHOME}/.marslo/.cygwin_marslo

shopt -s cdspell
shopt -s cmdhist
shopt -s histappend

# Disable ctrl+s lock putty
# stty -echo
# stty stop undef
stty ixany
stty ixoff -ixon
# stty start undef

# Set terminal color
# CentOS or RHEL
if [ -e /usr/share/terminfo/x/xterm-256color ]; then
  export TERM='xterm-256color'
# Ubuntu
elif [ -e /lib/terminfo/x/xterm-256color ]; then
  export TERM='xterm-256color'
# cygwin
elif [ -e /usr/share/terminfo/78/xterm-256color ]; then
  export TERM='xterm-256color'
# MacOS
elif [ -e /usr/share/terminfo/78/xterm-256color ]; then
  export TERM='xterm-256color'
else
  export TERM='xterm-color'
fi

# For public server (use common account)
function bello()
{

  # For Public account server
  source ${USERHOME}/.marslo/.bello_mac
  source ${USERHOME}/.marslo/.mac/.mymac_public
  # set -o vi
}

function bye()
{

  # For Public account server
  source ${USERHOME}/.marslo/.bye_marslo
  # set -o vi
}

function mkcd()
{
  mkdir -p $1 && cd $1
}

function cdls()
{
  cd $1 && ls
}

function cdla()
{
  cd $1 && la
}

function chmv()
{
  sudo mv $1 $2
  sudo chown -R "$(whoami)":"$(whoami)" $2
}

function chcp()
{
  sudo cp -r $1 $2
  sudo chown -R "$(whoami)":"$(whoami)" $2
}

function cha()
{
  sudo chown -R "$(whoami)":"$(whoami)" $1
}

# Inspired from http://www.earthinfo.org/linux-disk-usage-sorted-by-size-and-human-readable/
function udfs {
  du -sk "$@" | sort -nr | while read -r size fname;
  do
    for unit in k M G T P E Z Y;
    do
      if [ $size -lt 1024 ];
      then
        echo -e "${size}${unit}\\t${fname}";
        break;
      fi;
      size=$((size/1024));
    done;
  done
}

# For git diff
# Inspired from http://stackoverflow.com/questions/8259851/using-git-diff-how-can-i-get-added-and-modified-lines-numbers
function diff-lines() {
  local path=
  local line=
  while read -r; do
    esc=$'\033'
    if [[ $REPLY =~ ---\ (a/)?.* ]]; then
      continue
    elif [[ $REPLY =~ \+\+\+\ (b/)?([^[:blank:]$esc]+).* ]]; then
      path=${BASH_REMATCH[2]}
    elif [[ $REPLY =~ @@\ -[0-9]+(,[0-9]+)?\ \+([0-9]+)(,[0-9]+)?\ @@.* ]]; then
      line=${BASH_REMATCH[2]}
    elif [[ $REPLY =~ ^($esc\[[0-9;]+m)*([\ +-]) ]]; then
      echo "$path:$line:$REPLY"
      if [[ ${BASH_REMATCH[2]} != - ]]; then
        ((line++))
      fi
    fi
  done
}


# author: Duane Johnson
# email: duane.johnson@gmail.com
# date: 2008 Jun 12
# license: MIT
# Modified by Marslo
# Email: marslo.vida@gmail.com
# date: 2013-10-15 17:54:58

# Based on discussion at http://kerneltrap.org/mailarchive/git/2007/11/12/406496
# For get git infor
function gitinfo() {
  pushd . >/dev/null

  # Find base of git directory
  while [ ! -d .git ] && [ ! "$(pwd)" = "/" ]; do cd ..; done

  # Show various information about this git directory
  if [ -d .git ]; then
    echo "== Remote URL: "
    git remote -v
    echo

    echo "== Remote Branches: "
    git branch -r
    echo

    echo "== Local Branches:"
    git branch
    echo

    echo "== Configuration (.git/config)"
    cat .git/config
    echo

    echo "== Most Recent Commit"
    git plog --max-count=3
    echo

    echo "Type 'git plog', 'git plogs' and 'git log' for more commits, or 'git show' for full commit details."
  else
    echo "Not a git repository."
  fi
  popd >/dev/null
}

function gbl()
{
  git for-each-ref --sort=-committerdate --format='%(committerdate) %(authorname) %(refname)' refs/remotes/origin/ | grep -e ".$*" | head -n 10;
}

# For ssh agent
# start the ssh-agent
function start_agent {
  echo "Initializing new SSH agent..."
  # spawn ssh-agent
  /usr/bin/ssh-agent | sed 's/^echo/#echo/' > ${SSH_ENV}
  echo succeeded
  chmod 600 ${SSH_ENV}
  . ${SSH_ENV} > /dev/null
  /usr/bin/ssh-add
}

function ssh_agent() {
  if [ -f "${SSH_ENV}" ]; then
    . ${SSH_ENV} > /dev/null
    # pgrep -f ${SSH_AGENT_PID}
    # shellcheck disable=SC2009
    ps -ef | \grep ${SSH_AGENT_PID} | \grep ssh-agent$ > /dev/null || {
    start_agent;
  }
  else
    start_agent;
  fi
}

function pydict() {
  currentDir=$(pwd)
  cd ~/.vim/bundle/pydiction
  python pydiction.py "$@"
  cd $currentDir
}

function mgrep()
{
  find . -type f -exec grep -n -H -i --color=always "$@" {} \;
}

function p4nc()
{
  p4 change -o | sed '/^#/d' | sed '/^$/d' | sed "s|Description: |Description: $@|" | sed "s|JIRA ID.*$|JIRA ID: APPSOL-00000|" | sed "s|Review.*$|Review: self-review|" | sed "s/+$//" | p4 change -i
  # export cl=`p4 change -o | sed 's/<enter description here>/"Change list description"/' | sed '/^#/d' | sed '/^$/d' | p4 change -i | cut -d ' ' -f 2`
}

function p4blame()
{
  FILE="$1"
  LINE="$2"
  p4 annotate -cq "${FILE}" | sed "${LINE}q;d" | cut -f1 -d: | xargs p4 describe -s | sed -e '/Affected files/,$d'
}

function bd() {
  USER='svc_appbld'
  DOMAIN='engba'
  TYPE='appbuilder'

  args=`getopt rcd $*`
  if test $? != 0
  then
    echo -e 'Usage: [-r[c[d]]] HostnumVMnum
    -r: root
    -c: cdc builder (engma.veritas.com)
    -d: dev builder (appreldev)
    '
  else
    set -- $args

    for opt
    do
      case ${opt} in
        -r) USER='root' ;;
        -c) DOMAIN='engma' ;;
        -d) TYPE='appreldev' ;;
      esac
    done

    for VAR in "$@"; do true; done
    HOST=${VAR:0:2}
    VM=${VAR:2}

    /usr/bin/ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /home/marslo/.marslo/Marslo/Tools/Softwares/sshkey/Marslo\@Appliance ${USER}@${TYPE}${HOST}-vm${VM}.${DOMAIN}.veritas.com
  fi
}

function mydiff() {
  echo -e " [${1##*/}]\\t\\t\\t\\t\\t\\t\\t[${2##*/}]"
  diff -y --suppress-common-lines $1 $2
}

function dir()
{
	find . -iname "$@" -print0 | xargs -r0 ls -altr | awk '{print; total += $5}; END {print "total size: ", total}';
}

function dir-h()
{
  find . -iname "$@" -exec ls -lthrNF --color=always {} \;
  find . -iname "$@" -print0 | xargs -r0 du -csh| tail -n 1
}

function p4cd()
{
  unset P4DIFF
  p4 opened -c $1 | awk -F' ' '{print $1}' | p4 -x - -z tag diff -du > $1.diff
  export P4DIFF=vimdiff
}

function ccker()
{
  pushd .
  cd ~/myworks/appliance/automation/robot/branches/dev_main
  python utility/checkers/CodeChecker.py --check_all
  popd
}

function rcsync()
{
  SITE="Jira Confluence Jenkins Gitlab Artifactory Sonar Slave"
  HNAME=$(hostname | tr '[:upper:]' '[:lower:]')
  for i in $SITE; do
    CURNAME=$(echo $i | tr '[:upper:]' '[:lower:]')
    if [ "$HNAME" != $CURNAME ]; then
      echo ------------------- $i ---------------------;
      pushd $PWD
      cd /home/appadmin
      rsync -avzrlpgoD --exclude=.marslo/Tools --exclude=.vim/view --exclude=.vim/vimsrc --exclude=.vim/cache --exclude=.vim/.netrwhist --exclude=.ssh/known_hosts -e 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ' .marslo .vim .vimrc .inputrc .tmux.conf .pip appadmin@$i:~/
      popd
    fi
  done
}

function rcsource()
{
  source $PWD/.marslo/.marslorc
}

function getperm()
{
	find $1 -printf '%m\t%u\t%g\t%p\n' > $2
}

function riff()
{
  rsync -rv --size-only --dry-run $1 $2
}

function getcomputerversion()
{
  sudo dmidecode | grep -i prod
}

function mybr()
{
  myBranch=$1
  mainBranch="dev"
  set +H
  for i in $(/usr/local/opt/coreutils/libexec/gnubin/ls -1d */); do
    pushd . > /dev/null
    cd $i
    dirPath=${i%%/}
    if git rev-parse --git-dir > /dev/null 2>&1; then
      cBranch=$(git rev-parse --abbrev-ref HEAD)
      if [ -z ${myBranch} ]; then
        echo "${cBranch}" | grep -v -i "${mainBranch}" > /dev/null 2>&1 && echo -e "\\033[34m${dirPath}\\t: ${cBranch} \\033[0m"
      else
        if echo "${cBranch}" | grep -i "${myBranch}" > /dev/null 2>&1; then
          echo -e "\\033[33m** ${dirPath}\\t: ${cBranch} \\033[0m"
        elif [ ! "${cBranch}" = "${mainBranch}" ]; then
          echo -e "\\033[34m${dirPath}\\t: NOT ${mainBranch} : ${cBranch} !!\\033[0m"
        fi
      fi
    fi
    popd > /dev/null
  done
}

function gitclean() {
  set +H
  for i in $(/usr/local/opt/coreutils/libexec/gnubin/ls -1d */); do
    GITDIR=${i%%/}
    echo -e "=== \\033[32m ${GITDIR} \\033[0m ==="
    pushd . > /dev/null
    cd ${GITDIR}
    git clean -dfx
    git checkout -- *
    git reset --hard
    popd > /dev/null
  done
}

function gradleClean(){
  set +H
  pushd . > /dev/null
  for i in $(/usr/local/opt/coreutils/libexec/gnubin/ls -1d */); do
    gradleRootDir="./"
    SUBDIR=${i%%/}
    echo -e "\\033[34m=== ${SUBDIR} ===\\033[0m"
    if [ ! -e "${gradleRootDir}/build.gradle" ]; then
      gradleRootDir=$(find ${WORKSPACE} -name "build.gradle" -printf "%h\\n" | awk '{print length()"\t"$0 | "sort -n"}' | cut -f2 - | head -1)
      echo "gradleRootDir is ${gradleRootDir}"
    fi
    gradle clean
    gitclean
  done
  popd > /dev/null
}

function gitFetch() {
  GITDIR=${1%%/}
  GITBRANCH=$2
  ISStashed=false
  pushd . > /dev/null
  cd ${GITDIR}
  echo -e "\\033[34m=== ${GITDIR} ===\\033[0m"

  if git rev-parse --git-dir > /dev/null 2>&1; then
    utFiles=$(git ls-files --others --exclude-standard)
    mdFiles=$(git ls-files --modified)
    cBranch=$(git rev-parse --abbrev-ref HEAD)
    [ ! -z ${utFiles} ] && echo -e "\\033[35mUNTRACKED FILES in ${cBranch}: ${utFiles}\\033[0m"

    # checkout branch to $GITBRANCH
    if [ ! "${cBranch}" = "${GITBRANCH}" ]; then
      if [ ! -z "${mdFiles}" ]; then
        echo -e "\\033[31mGIT STASH: ${GITDIR} : ${cBranch} !!\\033[0m"
        git stash save "auto-stashed by gitFetch command"
        ISStashed=true
      fi
      git checkout ${GITBRANCH}
    fi

    # remove the local branch if the branch has been deleted in remote
    if git remote prune origin --dry-run | /usr/local/bin/grep prune; then
      prBranch=$(git remote prune origin --dry-run | /usr/local/bin/grep prune | awk -F'origin/' '{print $NF}')
      if [ "${cBranch}" = "${prBranch}" ] && [ -z "${mdFiles}" ]; then
        echo -e "\\033[32mThe current branch ${cBranch} has been rmeoved in remote. And the current branch has no modified files!\\033[0m"
        ISStashed=false
      fi

      if git branch | /usr/local/bin/grep "${prBranch}"; then
        echo -e "\\033[35mREMOVE LOCAL BRNACH ${prBranch}, due to ${prBranch} has been rmeoved in remote.\\033[0m"
        if ! git branch -D "${prBranch}"; then
          echo -e "\\033[32mWARNING: REMOVE LOCAL BRANCH ${prBranch} failed!!\\033[0m"
        fi
      fi
    fi

    # git fetchall on ${GITBRANCH}
    git remote prune origin
    git fetch origin --prune
    git fetch --all --force
    git merge --all --progress

    # restore the current working branch
    if ${ISStashed}; then
      git checkout "${cBranch}"
      git stash pop
      echo -e "\\033[35mGIT STASH POP: ${GITDIR} : ${cBranch}\\033[0m"
    fi
  else
    echo -e "\\033[33mNOT Git Repo!!\\033[0m"
  fi
  popd > /dev/null
}

function fetchdir()
{
  myDir="$1"
  for i in $(/usr/local/opt/coreutils/libexec/gnubin/ls -1d ${myDir%%/}/); do
    gitFetch "$i" "dev"
  done
}

function fetchall()
{
  if [ 1 -eq $# ]; then
    brName=$1
  else
    brName="dev"
  fi
  for i in $(/usr/local/opt/coreutils/libexec/gnubin/ls -1d */); do
    gitFetch "$i" "$brName"
  done
}

function proxydefault() {
  myproxy="http://192.168.1.106:1880"
  export all_proxy=$myproxy
  export http_proxy=$myproxy
  export https_proxy=$myproxy
  export ftp_proxy=$myproxy
  export socks_proxy=$myproxy

  export myproxy=$myproxy
  export HTTP_PROXY=$myproxy
  export HTTPS_PROXY=$myproxy
  export FTP_PROXY=$myproxy
  export SOCKS_PROXY=$myproxy
}

function rget(){
  route -nv get "$@"
}

function cleanview(){
  rm -rf ~/.vim/view/*
}

function envUpdate() {
  for i in $(seq 1 9); do
    ssh slave0${i} "cd ~/env; git clean -dfx; git reset --hard; git pull --all";
  done
}

# for itmer2
function msh {
  echo -e "\\033]6;1;bg;red;brightness;176\\a"
  echo -e "\\033]6;1;bg;green;brightness;181\\a"
  echo -e "\\033]6;1;bg;blue;brightness;175\\a"
  command ssh  -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$@"
}
function color {
  case $1 in
    green)
      echo -e "\\033]6;1;bg;red;brightness;57\\a"
      echo -e "\\033]6;1;bg;green;brightness;197\\a"
      echo -e "\\033]6;1;bg;blue;brightness;77\\a"
      ;;
    red)
      echo -e "\\033]6;1;bg;red;brightness;270\\a"
      echo -e "\\033]6;1;bg;green;brightness;60\\a"
      echo -e "\\033]6;1;bg;blue;brightness;83\\a"
      ;;
    orange)
      echo -e "\\033]6;1;bg;red;brightness;227\\a"
      echo -e "\\033]6;1;bg;green;brightness;143\\a"
      echo -e "\\033]6;1;bg;blue;brightness;10\\a"
      ;;
  esac
 }

# iTerm2 tab titles
function itit {
  if [ "$1" ]
  then
    # export PROMPT_COMMAND='__bp_precmd_invoke_cmd'
    echo -ne "\\033]0;${*}\\007"
  else
    export PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/\~}\007";'
    # export PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/\~}\007";__bp_precmd_invoke_cmd'
  fi
}

function forget() {
  history -d $(( $(history | tail -n 1 | /usr/local/bin/grep -oP '^ \d+') - 1 ));
}

function dir755() {
  find . -type d -perm 0777 \( -not -path "*.git" -a -not -path "*.git/*" \) -exec sudo chmod 755 {} \; -print
}

function file644() {
  find . -type f -perm 0777 \( -not -path "*.git" -a -not -path "*.git/*" \) -exec sudo chmod 644 {} \; -print
}
function clrproxy(){
  PROXY_ENV="http_proxy ftp_proxy https_proxy all_proxy socks_proxy HTTP_PROXY HTTPS_PROXY FTP_PROXY ALL_PROXY SOCKS_PROXY"
  for envvar in $PROXY_ENV; do
    unset $envvar
  done
  echo -e "Proxy environment variable removed."
}

function exportpx(){
  # myproxy=$(echo $1 | sed -n 's/\([0-9]\{1,3\}.\)\{4\}:\([0-9]\+\)/&/p')
  myproxy=$*
  PROXY_ENV="http_proxy ftp_proxy https_proxy all_proxy socks_proxy HTTP_PROXY HTTPS_PROXY FTP_PROXY ALL_PROXY SOCKS_PROXY"
  for envvar in $PROXY_ENV; do
    export $envvar=$myproxy
  done
  echo -e "Proxy environment variable set as $myproxy."
}

# For open cygwin from TotoalCommander/bat/vim
if [ -z "$STARTIN" ]; then
  cd $HOME
elif [ -d "$STARTIN" ]; then
  cd "$STARTIN"
else
  T=`dirname $STARTIN`
  if [ -d "$T" ]; then
    cd "$T"
  else
    echo "$STARTIN is not a valid path."
    cd $HOME
  fi
fi

function gvim()
{
    GVIM_CMD=$HOME/../../Marslo/MyProgramFiles/Vim/vim80/gvim.exe
    if [[ -z "$@" ]]; then
      arg=""
    else
      arg=$(/usr/bin/cygpath.exe -w $@)
    fi
    $GVIM_CMD ${arg}
}