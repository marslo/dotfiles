#!/bin/bash

# For Public account server
# source /home/marslo/.marslo/.scm/.public_marslo
# source /home/marslo/.marslo/.common_marslo
# source $HOME/.marslo/.tmux-session
source $HOME/.marslo/.cygwin_marslo

shopt -s cdspell

# Disable ctrl+s lock putty
# stty -echo
# stty stop undef
stty ixany
stty ixoff -ixon
# stty start undef

# Set terminal color
# CentOS or RHEL
if [ -e /usr/share/terminfo/x/xterm-256color ]; then
  export TERM='xterm-256color'
# Ubuntu
elif [ -e /lib/terminfo/x/xterm-256color ]; then
  export TERM='xterm-256color'
# cygwin
elif [ -e /usr/share/terminfo/78/xterm-256color ]; then
  export TERM='xterm-256color'
else
  export TERM='xterm-color'
fi

# For public server (use common account)
function bello()
{

  # For Public account server
  source /home/appadmin/.marslo/.devops/.public_marslo
  source /home/appadmin/.marslo/.bello_marslo
  # set -o vi
}

function bye()
{

  # For Public account server
  source /home/appadmin/.marslo/.bye_marslo
  # set -o vi
}

function mkcd()
{
  mkdir -p $1 && cd $1
}

function cdls()
{
  cd $1 && ls
}

function cdla()
{
  cd $1 && la
}

function chmv()
{
  sudo mv $1 $2
  sudo chown -R appadmin:appadmin $2
}

function cha()
{
  sudo chown -R appadmin:appadmin $1
}

# Inspired from http://www.earthinfo.org/linux-disk-usage-sorted-by-size-and-human-readable/
function udfs {
  du -sk "$@" | sort -nr | while read size fname;
  do
    for unit in k M G T P E Z Y;
    do
      if [ $size -lt 1024 ];
      then
        echo -e "${size}${unit}\t${fname}";
        break;
      fi;
      size=$((size/1024));
    done;
  done
}

# For git diff
# Inspired from http://stackoverflow.com/questions/8259851/using-git-diff-how-can-i-get-added-and-modified-lines-numbers
function diff-lines() {
  local path=
  local line=
  while read; do
    esc=$'\033'
    if [[ $REPLY =~ ---\ (a/)?.* ]]; then
      continue
    elif [[ $REPLY =~ \+\+\+\ (b/)?([^[:blank:]$esc]+).* ]]; then
      path=${BASH_REMATCH[2]}
    elif [[ $REPLY =~ @@\ -[0-9]+(,[0-9]+)?\ \+([0-9]+)(,[0-9]+)?\ @@.* ]]; then
      line=${BASH_REMATCH[2]}
    elif [[ $REPLY =~ ^($esc\[[0-9;]+m)*([\ +-]) ]]; then
      echo "$path:$line:$REPLY"
      if [[ ${BASH_REMATCH[2]} != - ]]; then
        ((line++))
      fi
    fi
  done
}


# author: Duane Johnson
# email: duane.johnson@gmail.com
# date: 2008 Jun 12
# license: MIT
# Modified by Marslo
# Email: marslo.vida@gmail.com
# date: 2013-10-15 17:54:58

# Based on discussion at http://kerneltrap.org/mailarchive/git/2007/11/12/406496
# For get git infor
function gitinfo() {
  pushd . >/dev/null

  # Find base of git directory
  while [ ! -d .git ] && [ ! `pwd` = "/" ]; do cd ..; done

  # Show various information about this git directory
  if [ -d .git ]; then
    echo "== Remote URL: "
    git remote -v
    echo

    echo "== Remote Branches: "
    git branch -r
    echo

    echo "== Local Branches:"
    git branch
    echo

    echo "== Configuration (.git/config)"
    cat .git/config
    echo

    echo "== Most Recent Commit"
    git plog --max-count=3
    echo

    echo "Type 'git plog', 'git plogs' and 'git log' for more commits, or 'git show' for full commit details."
  else
    echo "Not a git repository."
  fi
  popd >/dev/null
}

function gbl()
{
  git for-each-ref --sort=-committerdate --format='%(committerdate) %(authorname) %(refname)' refs/remotes/origin/ | grep -e ".$@" | head -n 10;
}

# For ssh agent
# start the ssh-agent
function start_agent {
  echo "Initializing new SSH agent..."
  # spawn ssh-agent
  /usr/bin/ssh-agent | sed 's/^echo/#echo/' > ${SSH_ENV}
  echo succeeded
  chmod 600 ${SSH_ENV}
  . ${SSH_ENV} > /dev/null
  /usr/bin/ssh-add
}

function ssh_agent() {
  if [ -f "${SSH_ENV}" ]; then
    . ${SSH_ENV} > /dev/null
    ps -ef | \grep ${SSH_AGENT_PID} | \grep ssh-agent$ > /dev/null || {
    start_agent;
  }
  else
    start_agent;
  fi
}

function pydict() {
  currentDir=`pwd`
  cd ~/.vim/bundle/pydiction
  python pydiction.py $@
  cd $currentDir
}

function mgrep()
{
  /bin/find . -type f -exec grep -n -H -i --color=always "$@" {} \;
}

function p4nc()
{
  p4 change -o | sed '/^#/d' | sed '/^$/d' | sed "s|Description: |Description: $@|" | sed "s|JIRA ID.*$|JIRA ID: APPSOL-00000|" | sed "s|Review.*$|Review: self-review|" | sed "s/+$//" | p4 change -i
  # export cl=`p4 change -o | sed 's/<enter description here>/"Change list description"/' | sed '/^#/d' | sed '/^$/d' | p4 change -i | cut -d ' ' -f 2`
}

function p4blame()
{
  FILE="$1"
  LINE="$2"
  p4 annotate -cq "${FILE}" | sed "${LINE}q;d" | cut -f1 -d: | xargs p4 describe -s | sed -e '/Affected files/,$d'
}

function bd() {
  USER='svc_appbld'
  DOMAIN='engba'
  TYPE='appbuilder'

  args=`getopt rcd $*`
  if test $? != 0
  then
    echo -e 'Usage: [-r[c[d]]] HostnumVMnum
    -r: root
    -c: cdc builder (engma.veritas.com)
    -d: dev builder (appreldev)
    '
  else
    set -- $args

    for opt
    do
      case ${opt} in
        -r) USER='root' ;;
        -c) DOMAIN='engma' ;;
        -d) TYPE='appreldev' ;;
      esac
    done

    for VAR in "$@"; do true; done
    HOST=${VAR:0:2}
    VM=${VAR:2}

    /usr/bin/ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /home/marslo/.marslo/Marslo/Tools/Softwares/sshkey/Marslo\@Appliance ${USER}@${TYPE}${HOST}-vm${VM}.${DOMAIN}.veritas.com
  fi
}

function mydiff() {
  echo -e " [${1##*/}]\t\t\t\t\t\t\t[${2##*/}]"
  diff -y --suppress-common-lines $1 $2
}

function dir()
{
	find . -iname "$@" -print0 | xargs -r0 ls -altr | awk '{print; total += $5}; END {print "total size: ", total}';
}

function dir-h()
{
  find . -iname "$@" -exec ls -lthrNF --color=always {} \;
  find . -iname "$@" -print0 | xargs -r0 du -csh| tail -n 1
}

p4cd()
{
  unset P4DIFF
  p4 opened -c $1 | awk -F' ' '{print $1}' | p4 -x - -z tag diff -du > $1.diff
  export P4DIFF=vimdiff
}

function ccker()
{
  pushd .
  cd ~/myworks/appliance/automation/robot/branches/dev_main
  python utility/checkers/CodeChecker.py --check_all
  popd
}

function rcsync()
{
  SITE="Jira Confluence Jenkins Gitlab Artifactory Sonar Slave"
  HNAME=`hostname | tr '[:upper:]' '[:lower:]'`
  for i in $SITE; do
    CURNAME=$(echo $i | tr '[:upper:]' '[:lower:]')
    if [ "$HNAME" != $CURNAME ]; then
      echo ------------------- $i ---------------------;
      pushd $PWD
      cd /home/appadmin
      rsync -avzrlpgoD --exclude=.marslo/Tools --exclude=.vim/view --exclude=.vim/cache --exclude=.vim/.netrwhist --exclude=.ssh/known_hosts -e 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ' .marslo .vim .vimrc .inputrc .tmux.conf appadmin@$i:~/
      popd
    fi
  done
}

function rcsource()
{
  source $PWD/.marslo/.marslorc
}

function pullall()
{
  for i in $(\ls -1); do
    echo "-------------$i-------------------"
    pushd .
    cd $i
    git pull
    popd
  done
}

# For open cygwin from TotoalCommander/bat/vim
if [ -z "$STARTIN" ]; then
  cd $HOME
elif [ -d "$STARTIN" ]; then
  cd "$STARTIN"
else
  T=`dirname $STARTIN`
  if [ -d "$T" ]; then
    cd "$T"
  else
    echo "$STARTIN is not a valid path."
    cd $HOME
  fi
fi
