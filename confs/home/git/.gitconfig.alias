[alias]
  aa          = add --all
  st          = status
  pl          = pull --rebase
  ci          = commit -m
  ca          = "!f() { git add --all $(git rev-parse --show-toplevel); git commit -am \"$1\" ; }; f"
  cae         = commit --allow-empty -am
  caa         = "!f(){ git add --all && git commit --amend --no-edit --allow-empty; }; f"
  cia         = commit --amend --allow-empty
  cin         = commit --amend --no-edit --allow-empty
  caj         = commit --author "marslo <marslo.jiao@gmail.com>" -m
  co          = checkout
  br          = branch
  bra         = branch -a
  cl          = clean -dfx
  cn          = clone
  sb          = show-branch
  cp          = cherry-pick
  cb          = rev-parse --abbrev-ref HEAD
  wc          = whatchanged
  gca         = gc --aggressive
  fa          = fetch --all --force
  ma          = merge --all --progress
  psa         = push origin --all
  pst         = push origin --tag
  fpush       = push origin --force
  # cfmp        = "!func(){ git add --all . && git commit -aqm \"$1\" && git fetch --all && git merge --all && git push; }; func"
  # cap         = "!f() { git add --all .; git commit -am \"${1}\"; git push; }; f"
  # fma         = "!f() { git fetch --all --force; git merge --all --progress; git remote prune origin; }; f"

  # rebase & squash
  sq          = ! "f() { TARGET=$1 && GIT_EDITOR=\"sed -i -e '2,$TARGET s/^pick /s /;/# This is the 2nd commit message:/,$ {d}'\" git rebase -i HEAD~$TARGET; }; f"
  # sq          = !"f() { NL=$1; GIT_EDITOR=\"sed -i '2,$NL s/^pick/squash/;/# This is the 2nd commit message:/,$ {d}'\"; git rebase -i HEAD~$NL; }; f"

  fd          = diff --name-status
  in          = info --no-config
  wd          = diff --color-words -U0
  ld          = !bash -c '. ~/.marslo/.gitrc && git diff -U0 \"$@\" | diff-lines' -
  # ld          = !bash -l -c 'git diff -U0 "$@" | diff-lines' -
  ldiff       = diff -U0

  ign         = ls-files -o -i --exclude-standard
  ls-effort   = !git log --pretty=format: --name-only | sort | uniq -c | sort -rg
  tagcommit   = rev-list -1
  stag        = tag --sort=-creatordate --format='%(creatordate:short)%09%(refname:strip=2)'
  pl          = !git --no-pager log --color --graph --pretty=tformat:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit --date=relative --max-count=3
  pls         = log --color --graph --pretty=tformat:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit --date=relative
  fpl         = log --color --graph --pretty=tformat:'%Cred%H%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit --date=relative
  fl          = log -p --graph --color --graph
  dl          = log --color --stat --abbrev-commit --date=relative --graph --submodule --format='%C(red)%h%Creset %C(yellow)(%ad)%Creset %s %C(blue)<%an>%Creset'

  # Showing all branches and their relationshps
  tre         = log --color --graph --pretty=oneline --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --decorate --abbrev-commit --all
  clog        = log --color --graph --all --decorate --simplify-by-decoration --oneline
  pshow       = show -s --pretty='tformat:%Cred%h%Creset %Cgreen(%s)%Creset'

  rlog        = "!bash -c 'while read branch; do \n\
                   git fetch --all --force; \n\
                   git plog refs/remotes/origin/$branch; \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"

  rlogs       = "!bash -c 'while read branch; do \n\
                   git fetch --all --force; \n\
                   git plogs refs/remotes/origin/$branch; \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"

  cap         = "!bash -c 'while read branch; do \n\
                   git add --all .; \n\
                   git commit -am \"${0}\"; \n\
                   git push origin $branch; \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"

  cfmp        = "!bash -c 'while read branch; do \n\
                   git add --all .; \n\
                   git commit -aqm \"${0}\"; \n\
                   git fetch --all --force; \n\
                   git merge --all --progress remotes/origin/$branch; \n\
                   git push origin $branch; \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"

  rbr         = "!f(){ git branch -ra | grep $1; }; f"
  diffremote  = "!bash -c 'while read branch; do \n\
                   git fetch origin $branch; \n\
                   git ld $branch remotes/origin/$branch; \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"

  diffname    = git diff --name-only
  diffbranch  = log --left-right --graph --cherry-pick --oneline

  # info      = !bash -l -c 'gitinfo'
  # info      = !bash -c '. ~/.marslo/.marslorc && gitinfo'
  last        = cat-file commit HEAD
  task        = grep -EI \"TODO|FIXME\"
  # curbranch = "!bash -c 'git branch | grep \* | sed "s/\* \(.*\)/ (\1)/"'"
  dreview     = review development

  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch.
  mpr         = "!f() { \
                          declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
                          declare branch=\"${2:-$currentBranch}\"; \
                          if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
                              git fetch origin refs/pull/$1/head:pr/$1 && \
                              git checkout -B $branch && \
                              git rebase $branch pr/$1 && \
                              git checkout -B $branch && \
                              git merge pr/$1 && \
                              git branch -D pr/$1 && \
                              git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
                          fi \
                      }; f"
  # info        = "!f() { \
                   # git info --no-config | more \
                 # }; f"
  init-repo   = "!f() { \
                    declare help=\"\"\"\
                      USAGE: git init-repo <REMOTE_URL> [DEFAULT_BRANCH] [LOCAL_DIR] \n\
                      OPT: \n\
                            REMOTE_URL : mandatory \n\
                        DEFAULT_BRANCH : optinal. default is 'master' \n\
                             LOCAL_DIR : optional. default is current directory: '\"$(pwd)\"' \n\
                    \"\"\"; \
                    declare remoteURL=\"$1\"; \
                    declare defaultBr='master'; \
                    declare localDir='.'; \
                    [ 2 -eq $# ] && defaultBr=\"$2\"; \
                    [ 3 -eq $# ] && localDir=\"$3\"; \
                    if [ 0 -eq $# ]; then \
                      echo \"${help}\"; \
                    else \
                      [ -d ${localDir} ] || mkdir -p ${localDir}; \
                      cd ${localDir} ; \
                      git init && \
                      git remote add origin ${remoteURL} && \
                      git fetch --all --force --quiet && \
                      git checkout -b ${defaultBr}; \
                    fi \
                  }; f"

  # [m]eta/[c]onfig checkout
  mc          = "!f() { \
                    if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then \
                      git fetch origin --force refs/meta/config:refs/remotes/origin/meta/config; \
                      git checkout meta/config; \
                    else \
                      echo \"current directory isn't inside the git working tree\" ; \
                    fi \
                  }; f"

  # [m]arslo [h]elp
  mh          = "!f(){ \
                    declare help=\"\"\"\
                      marslo specific git alias \n\
                      EXPLATIOIN: \n\
                         ca = git commit -am \n\
                        cae = git commit --allow-empty -am \n\
                        caa = git add --all && git commit --amend --no-edit --allow-empty \n\
                        cia = git commit --amend --allow-empty \n\
                        cin = commit --amend --no-edit --allow-empty \n\
                         mp = git caa & git push --force -u <current-brancha> \n\
                         mw = git caa & git review <current-branch> \n\
                    \"\"\"; \
                    echo \"${help}\"; \
                  }; f"
  sub         = submodule
  subpull     = !git pull && git submodule sync --recursive && git submodule update --init --recursive
  subupdate   = submodule update --remote --merge
  pdraft      = !git push origin HEAD:refs/drafts/$1
  ghook       = !bash -c 'scp -p -P 29418 vgitcentral.marvell.com:hooks/commit-msg $(git rev-parse --git-dir)/hooks/'
  showupstream = "!bash -c 'while read branch; do \n\
                    upstream=$(git rev-parse --abbrev-ref $branch@{upstream} 2>/dev/null); \n\
                    if [[ $? == 0 ]]; then \n\
                      echo \"$branch tracks $upstream\"; \n\
                    else \n\
                      echo \"$branch has no upstream configured\"; \n\
                    fi; \n\
                  done < <(git for-each-ref --format=\"%(refname:short)\" refs/heads/*) '"
  # [u]pdate [a]ll
  ua          = "!bash -c 'while read branch; do \n\
                   echo -e \"\\033[1;33m~~> ${branch}\\033[0m\" \n\
                   git fetch --all --force; \n\
                   if [ 'meta/config' == \"${branch}\" ]; then \n\
                     git fetch origin --force refs/${branch}:refs/remotes/origin/${branch} \n\
                   fi \n\
                   git rebase -v refs/remotes/origin/${branch}; \n\
                   git merge --all --progress refs/remotes/origin/${branch}; \n\
                   git remote prune origin; \n\
                   if git --no-pager config --file $(git rev-parse --show-toplevel)/.gitmodules --get-regexp url; then \n\
                     git submodule sync --recursive; \n\
                     git submodule update --init --recursive \n\
                   fi \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"
  # [m]arslo force [p]ush
  mp          = "!bash -c 'while read branch; do \n\
                    echo -e \"\\033[1;33m~~> ${branch}\\033[0m\" \n\
                    git add --all $(git rev-parse --show-toplevel) \n\
                    git commit --amend --no-edit \n\
                    if [ 'meta/config' == \"${branch}\" ]; then \n\
                      git push -u --force origin HEAD:refs/meta/config \n\
                    else \n\
                      git push -u --force origin ${branch} \n\
                    fi \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"
  # [m]arslo revie[w]
  mw          = "!bash -c 'while read branch; do \n\
                    echo -e \"\\033[1;33m~~> ${branch}\\033[0m\" \n\
                    if [ 'meta/config' == \"${branch}\" ]; then \n\
                      git push origin HEAD:refs/for/refs/meta/config \n\
                    else \n\
                      git review ${branch} \n\
                    fi \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"

  # [r]eset to [o]riginal
  ro          = "!bash -c 'while read branch; do \n\
                    echo -e \"\\033[1;33m~~> ${branch}\\033[0m\" \n\
                    if [ 'meta/config' == \"${branch}\" ]; then \n\
                      git fetch origin --force refs/meta/config:refs/remotes/origin/meta/config \n\
                      git reset --hard remotes/origin/${branch} \n\
                    else \n\
                      git fetch --all --force \n\
                      git reset --hard origin/${branch} \n\
                    fi \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"
  revset      = "!bash -c 'ix=0; for ih in $(git rev-list --reverse HEAD); do \n\
                  TCMD=\"git notes --ref linrev\"; \n\
                  TCMD=\"$TCMD add $ih -m \\\"(r\\$((++ix)))\\\"\"; \n\
                  eval \"$TCMD\"; \n\
                done; \n\
                echo \"Linear revision notes are set.\" '"
  revunset    = "!bash -c 'ix=0; for ih in $(git rev-list --reverse HEAD); do \n\
                  TCMD=\"git notes --ref linrev\"; \n\
                  TCMD=\"$TCMD remove $ih\"; \n\
                  eval \"$TCMD 2>/dev/null\"; \n\
                done; \n\
                echo \"Linear revision notes are unset.\" '"
  revlog          = log --max-count=3 --color --graph --notes=linrev --pretty=tformat:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %C(blue)<%an>%Creset %N' --abbrev-commit --date=relative
  show-rev-number = !bash -c 'git rev-list --reverse HEAD | nl | awk \"{ if(\\$1 == "$0") { print \\$2 }}\"'
  show-rev        = "!f(){ git rev-list --count $1; }; f"

  show-remote-rev = "! bash -c 'git ls-remote --heads $(git config --get remote.origin.url) | \n\
                                grep \"refs/heads/$0\" | \n\
                                cut -f 1'"

  ghprofile       = "! bash -c 'git config user.email \"marslo.jiao@gmail.com\"; git config user.name \"marslo\"'"
  ls              = log --stat --pretty                                                                                                    = short --graph
  subst = submodule foreach \"git status\"
  first = rev-list --max-parents=0 HEAD
  make-patch = "!bash -c \"git format-patch HEAD~1; git reset HEAD~1\""
