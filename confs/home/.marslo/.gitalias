[alias]
  aa          = add --all
  st          = status
  rb          = rebase
  # pl          = pull --rebase
  ci          = commit -m
  cae         = commit --allow-empty -am
  # [c]ommit [a]dd [a]all
  caa         = "!f(){ git add --all && git commit --amend --no-edit --allow-empty; }; f"
  cin         = commit --amend --no-edit --allow-empty
  caj         = commit --author "marslo <marslo.jiao@gmail.com>" -m
  co          = checkout
  br          = branch
  bra         = branch -a
  cl          = clean -dfx
  cn          = clone
  sb          = show-branch
  cp          = cherry-pick
  cb          = rev-parse --abbrev-ref HEAD
  wc          = whatchanged
  gca         = gc --aggressive
  fa          = fetch --all --force
  ma          = merge --all --progress
  psa         = push origin --all
  pst         = push origin --tag
  fpush       = push origin --force
  root        = rev-parse --show-toplevel
  # cfmp      = "!func(){ git add --all . && git commit -aqm \"$1\" && git fetch --all && git merge --all && git push; }; func"
  # cap       = "!f() { git add --all .; git commit -am \"${1}\"; git push; }; f"
  # fma       = "!f() { git fetch --all --force; git merge --all --progress; git remote prune origin; }; f"

  # [r]ebase & s[q]uash
  sq          = ! "f() { TARGET=$1 && GIT_EDITOR=\"sed -i -e '2,$TARGET s/^pick /s /;/# This is the 2nd commit message:/,$ {d}'\" git rebase -i HEAD~$TARGET; }; f"
  # sq        = !"f() { NL=$1; GIT_EDITOR=\"sed -i '2,$NL s/^pick/squash/;/# This is the 2nd commit message:/,$ {d}'\"; git rebase -i HEAD~$NL; }; f"

  # [d]iff with [p]revious branch
  pd          = diff ..@{-1}
  # [d]iff [f]ile name only
  fd          = diff --name-status
  in          = info --no-config
  # [d]iff via colorful [w]ords
  wd          = diff --color-words -U0
  ld          = !bash -c '. ~/.marslo/.gitrc && git diff -U0 \"$@\" | diff-lines' -
  # ld        = !bash -l -c 'git diff -U0 "$@" | diff-lines' -
  ldiff       = diff -U0

  ign         = ls-files -o -i --exclude-standard
  ls-effort   = !git log --pretty=format: --name-only | sort | uniq -c | sort -rg
  tagcommit   = rev-list -1
  stag        = tag --sort=-creatordate --format='%(creatordate:short)%09%(refname:strip=2)'
  pl          = !git --no-pager log --color --graph --pretty=tformat:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit --date=relative --max-count=3
  pls         = log --color --graph --pretty=tformat:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit --date=relative
  fpl         = log --color --graph --pretty=tformat:'%Cred%H%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit --date=relative
  fl          = log -p --graph --color --graph
  dl          = log --color --stat --abbrev-commit --date=relative --graph --submodule --format='%C(red)%h%Creset %C(yellow)(%ad)%Creset %s %C(blue)<%an>%Creset'

  # Showing all branches and their relationshps
  tre         = log --color --graph --pretty=oneline --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --decorate --abbrev-commit --all
  clog        = log --color --graph --all --decorate --simplify-by-decoration --oneline
  pshow       = show -s --pretty='tformat:%Cred%h%Creset %Cgreen(%s)%Creset'

  rlog        = "!bash -c 'while read branch; do \n\
                   git fetch --all --force; \n\
                   git plog refs/remotes/origin/$branch; \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"

  rlogs       = "!bash -c 'while read branch; do \n\
                   git fetch --all --force; \n\
                   git plogs refs/remotes/origin/$branch; \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"

  cap         = "!bash -c 'while read branch; do \n\
                   git add --all .; \n\
                   git commit -am \"${0}\"; \n\
                   git push origin $branch; \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"

  cfmp        = "!bash -c 'while read branch; do \n\
                   git add --all .; \n\
                   git commit -aqm \"${0}\"; \n\
                   git fetch --all --force; \n\
                   git merge --all --progress remotes/origin/$branch; \n\
                   git push origin $branch; \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"

  rbr         = "!f(){ git branch -ra | grep $1; }; f"
  diffremote  = "!bash -c 'while read branch; do \n\
                             git fetch origin $branch; \n\
                             git ld $branch remotes/origin/$branch; \n\
                           done < <(git rev-parse --abbrev-ref HEAD) \n\
                          '"

  diffname    = git diff --name-only
  diffbranch  = log --left-right --graph --cherry-pick --oneline

  # info      = !bash -l -c 'gitinfo'
  # info      = !bash -c '. ~/.marslo/.marslorc && gitinfo'
  last        = cat-file commit HEAD
  task        = grep -EI \"TODO|FIXME\"
  # curbranch = "!bash -c 'git branch | grep \* | sed "s/\* \(.*\)/ (\1)/"'"
  dreview     = review development

  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch.
  mpr         = "!f() { \
                        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
                        declare branch=\"${2:-$currentBranch}\"; \
                        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
                            git fetch origin refs/pull/$1/head:pr/$1 && \
                            git checkout -B $branch && \
                            git rebase $branch pr/$1 && \
                            git checkout -B $branch && \
                            git merge pr/$1 && \
                            git branch -D pr/$1 && \
                            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
                        fi \
                      }; f \
                "
  # info        = "!f() { git info --no-config | more }; f"
  init-repo   = "!f() { \
                        declare help=\"\"\"\
                          USAGE: git init-repo <REMOTE_URL> [DEFAULT_BRANCH] [LOCAL_DIR] \n\n\
                          OPT: \n\
                                REMOTE_URL : mandatory \n\
                            DEFAULT_BRANCH : optinal. default is 'master' \n\
                                 LOCAL_DIR : optional. default is current directory: '\"$(pwd)\"' \n\
                        \"\"\"; \
                        declare remoteURL=\"$1\"; \
                        declare defaultBr='master'; \
                        declare localDir='.'; \
                        [ 2 -le $# ] && defaultBr=\"$2\"; \
                        [ 3 -eq $# ] && localDir=\"$3\"; \
                        if [ 0 -eq $# ] || [ 3 -lt $# ]; then \
                          echo \"${help}\"; \
                        else \
                          [ -d ${localDir} ] || mkdir -p ${localDir}; \
                          cd ${localDir} ; \
                          git init && \
                          git remote add origin ${remoteURL} && \
                          git fetch --all --force --quiet && \
                          git checkout -b ${defaultBr}; \
                        fi \
                      }; f \
                "

  # [m]eta/[c]onfig checkout
  mc          = "!f() { \
                        if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then \
                          git fetch origin --force refs/meta/config:refs/remotes/origin/meta/config; \
                          git checkout meta/config; \
                        else \
                          echo \"current directory isn't inside the git working tree\" ; \
                        fi \
                      }; f \
                "

  # [m]arslo [h]elp
  mh          = "!f() { \
                        declare help=\"\"\"\
                          marslo specific git alias \n\n\
                          EXPLATIOIN: \n\
                             ca = git commit -am \n\
                            cae = git commit --allow-empty -am \n\
                            caa = git add --all && git commit --amend --no-edit --allow-empty \n\
                            cia = git commit --amend --allow-empty [-m <comments>] \n\
                            cin = commit --amend --no-edit --allow-empty \n\
                             mp = git caa & git push --force -u <current-brancha> \n\
                             mw = git caa & git review <current-branch> \n\
                             ro = git fetch all & git reset --hard origin/<current-branch> \n\
                        \"\"\"; \
                        echo \"${help}\"; \
                      }; f\
                "
  sub         = submodule
  subpull     = !git pull && git submodule sync --recursive && git submodule update --init --recursive
  subupdate   = submodule update --remote --merge
  pdraft      = !git push origin HEAD:refs/drafts/$1
  ghook       = !bash -c 'scp -p -P 29418 gerrit.company.com:hooks/commit-msg $(git rev-parse --git-dir)/hooks/'
  showupstream = "!bash -c 'while read branch; do \n\
                    upstream=$(git rev-parse --abbrev-ref ${branch}@{upstream} 2>/dev/null); \n\
                    if [[ $? == 0 ]]; then \n\
                      echo \"${branch} tracks ${upstream}\"; \n\
                    else \n\
                      echo \"${branch} has no upstream configured\"; \n\
                    fi; \n\
                  done < <(git for-each-ref --format=\"%(refname:short)\" refs/heads/*) '"

  # [c]ommit -[a]m
  ca          = "!f() { \
                        git add --all $(git rev-parse --show-toplevel) ; \
                        git commit -am \"$1\" ; \
                      }; f \
                "

  # [c]omm[i]t --[a]mend
  cia         = "!f() { \
                        OPT='commit --amend --allow-empty' ; \
                        if [ 0 -eq $# ]; then \
                          git ${OPT} ; \
                        else \
                          git ${OPT} -m \"$*\" ; \
                        fi; \
                      }; f \
                "

  del         = "!f() { \
                        br=\"$1\"; \
                        findL=0; \
                        for branchL in $(git for-each-ref --format='%(refname:short)' refs/heads/); do \
                          [[ \"${br}\" = \"${branchL}\" ]] && findL=1 && break; \
                        done; \
                        if [ 1 = ${findL} ]; then \
                          git branch -D \"${br}\"; \
                          echo \"~~> \\033[1;33m${br}\\033[0m removed from local\"; \
                        else \
                          echo \"~~> \\033[1;31m${br}\\033[0m cannot be found in local\"; \
                        fi; \
                        findR=0; \
                        for branchR in $(git for-each-ref --format='%(refname:short)' refs/remotes/origin/); do \
                          [[ \"origin/${br}\" = \"${branchR}\" ]] && findR=1 && break; \
                        done; \
                        if [ 1 = ${findR} ]; then \
                          echo \"~~> \\033[1;33morigin/${br}\\033[0m removed from remote\"; \
                          git push origin --delete \"${br}\"; \
                        else \
                          echo \"~~> \\033[1;31morigin/${br}\\033[0m cannot be found in remote.\"; \
                        fi; \
                      }; f \
                "

  add-refs    = "!f() { \
                        declare help=\"\"\" \
                          USAGE: \n\
                            git add-refs [REMOTE] [BRANCH] \n\n\
                          EXMAPLE: \n\
                            add +refs/heads/*:+refs/remotes/origin/* : \n\
                              $ git add-refs \n\
                            add +refs/heads/<branch>:+refs/remotes/origin/<branch> : \n\
                              $ git add-refs <branch> \n\
                            add +refs/heads/<branch>:+refs/remotes/<new-origin>/<branch> : \n\
                              $ git add-refs <branch> <new-origin> \n\
                        \"\"\"; \
                        if [ 0 -eq $# ]; then \
                          rn='remote.origin.fetch'; \
                          sp='+refs/heads/*:refs/remotes/origin/*'; \
                        elif [ 1 -eq $# ]; then \
                          rn='remote.origin.fetch'; \
                          sp='+refs/heads/'\"${1}\":'refs/remotes/origin/'\"${1}\"; \
                        elif [ 2 -eq $# ]; then \
                          rn='remote.'\"$2\"'.fetch'; \
                          sp='+refs/heads/'\"$1\":'refs/remotes/'\"$2\"/\"$1\"; \
                        else \
                          echo \"${help}\"; \
                          exit 1; \
                        fi; \
                        matches=0; \
                        for s in $(git config --get-all ${rn}); do [[ \"${s}\" = \"${sp}\" ]] && matches=1; done; \
                        if [ '1' -eq \"${matches}\" ]; then \
                          echo \"${sp} already exists in ${rn}.\"; \
                        else \
                          git config --add \"${rn}\" \"${sp}\"; \
                        fi; \
                      }; f \
                "
  # [s]ubmodel [u]pdate
  su          = "!bash -c 'git submodule sync --recursive && git submodule update -f --init --recursive'"

  # [u]pdate [a]ll
  # git fetch --prune origin 'refs/tags/*:refs/tags/*' '+refs/heads/*:refs/remotes/origin/*'
  ua          = "!bash -c 'while read branch; do \n\
                   echo -e \"\\033[1;33m~~> ${branch}\\033[0m\" \n\
                   git fetch --all --force; \n\
                   git fetch --prune --prune-tags --force origin; \n\
                   if [ 'meta/config' == \"${branch}\" ]; then \n\
                     git fetch origin --force refs/${branch}:refs/remotes/origin/${branch} \n\
                   fi \n\
                   git rebase -v refs/remotes/origin/${branch}; \n\
                   git merge --all --progress refs/remotes/origin/${branch}; \n\
                   git remote prune origin; \n\
                   if git --no-pager config --file $(git rev-parse --show-toplevel)/.gitmodules --get-regexp url; then \n\
                     git submodule sync --recursive; \n\
                     git submodule update -f --init --recursive \n\
                   fi \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"

  # [r]eset --h[a]rd
  ra          = "!bash -c 'while read branch; do \n\
                   echo -e \"\\033[1;33m~~> ${branch}\\033[0m\" \n\
                   git reset --hard origin/${branch} \n\
                 done < <(git rev-parse --abbrev-ref HEAD)' "

  # [m]arslo force [p]ush
  mp          = "!bash -c 'while read branch; do \n\
                    echo -e \"\\033[1;33m~~> ${branch}\\033[0m\" \n\
                    git add --all $(git rev-parse --show-toplevel) \n\
                    git commit --amend --no-edit \n\
                    if [ 'meta/config' == \"${branch}\" ]; then \n\
                      git push -u --force origin HEAD:refs/meta/config \n\
                      git fetch origin --force refs/meta/config:refs/remotes/origin/meta/config ; \
                      git reset --hard remotes/origin/${branch} ; \
                    else \n\
                      git push -u --force origin ${branch} \n\
                    fi \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"

  # [m]arslo revie[w]
  mw          = "!bash -c 'while read branch; do \n\
                    echo -e \"\\033[1;33m~~> ${branch}\\033[0m\" \n\
                    if [ 'meta/config' == \"${branch}\" ]; then \n\
                      git push origin HEAD:refs/for/refs/meta/config \n\
                    else \n\
                      git review ${branch} \n\
                    fi \n\
                 done < <(git rev-parse --abbrev-ref HEAD) '"

  # [c]heck [o]out
  # co          = "!f() { \
                        # git checkout $* ; \
                        # if git --no-pager config --file $(git rev-parse --show-toplevel)/.gitmodules --get-regexp url; then \
                          # git submodule update --init ; \
                        # fi; \
                      # }; f \
                # "

  # [r]eset to [o]riginal
  ro          = "!f() { \
                        if [ 0 -eq $# ]; then \
                          branch=$(git rev-parse --abbrev-ref HEAD)   ; \
                          echo \"\\033[1;33m~~> ${branch}\\033[0m\"   ; \
                          if [ 'meta/config' == \"${branch}\" ]; then \
                            git fetch origin --force refs/meta/config:refs/remotes/origin/meta/config ; \
                            git reset --hard remotes/origin/${branch} ; \
                          else \
                            git fetch --all --force           ; \
                            git reset --hard origin/${branch} ; \
                          fi ; \
                        else \
                          echo \"\\033[1;33m~~> \"$*\"\\033[0m\" ; \
                          git fetch --all --force                ; \
                          git reset --hard origin/\"$*\"         ; \
                        fi ; \
                        if git --no-pager config --file $(git rev-parse --show-toplevel)/.gitmodules --get-regexp url; then \
                          git submodule foreach --recursive git clean -dffx  ; \
                          git submodule foreach --recursive git reset --hard ; \
                          git submodule update -f --init --recursive         ; \
                        fi ; \
                      }; f \
                "

  # sort local/remote branch via committerdate (DESC)
  # git for-each-ref --sort=-committerdate ${refs} --format='%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always | column -ts'|'; \
  recent = "!f() { declare help=\"USAGE: git recent [remotes]\"; \
                   declare refs='refs/heads'; \
                   if [ 0 -eq $# ]; then \
                     refs='refs/heads'; \
                   elif [ 1 -eq $# ] && [ 'remotes' = \"$1\" ]; then \
                     refs='refs/remotes/origin'; \
                   else \
                     echo \"${help}\"; \
                     exit 1; \
                   fi; \
                   git for-each-ref \
                       --sort=-committerdate \
                       ${refs} \
                       --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))' \
                       --color=always; \
                 }; f \
           "

  revset      = "!bash -c 'ix=0; for ih in $(git rev-list --reverse HEAD); do \n\
                  TCMD=\"git notes --ref linrev\"; \n\
                  TCMD=\"$TCMD add $ih -m \\\"(r\\$((++ix)))\\\"\"; \n\
                  eval \"$TCMD\"; \n\
                done; \n\
                echo \"Linear revision notes are set.\" '"
  revunset    = "!bash -c 'ix=0; for ih in $(git rev-list --reverse HEAD); do \n\
                  TCMD=\"git notes --ref linrev\"; \n\
                  TCMD=\"$TCMD remove $ih\"; \n\
                  eval \"$TCMD 2>/dev/null\"; \n\
                done; \n\
                echo \"Linear revision notes are unset.\" '"
  revlog          = log --max-count=3 --color --graph --notes=linrev --pretty=tformat:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %C(blue)<%an>%Creset %N' --abbrev-commit --date=relative
  show-rev-number = "!bash -c 'git rev-list --reverse HEAD | \n\
                               nl | \n\
                               awk \"{ if(\\$1 == "$0") { print \\$2 }}\" \n\
                              '"
  show-rev        = "!f(){ git rev-list --count $1; }; f"

  show-remote-rev = "! bash -c 'git ls-remote --heads $(git config --get remote.origin.url) | \n\
                                grep \"refs/heads/$0\" | \n\
                                cut -f 1 \n\
                               '"
  ghprofile       = "! bash -c 'git config user.email \"marslo.jiao@gmail.com\"; \n\
                                git config user.name \"marslo\" \n\
                               '"
  ls              = log --stat --pretty                                                                                                    = short --graph
  subst           = submodule foreach \"git status\"
  first           = rev-list --max-parents=0 HEAD
  make-patch      = "!bash -c \"git format-patch HEAD~1; git reset HEAD~1\""
  aliases         = !git config --get-regexp ^alias\\. | sed -e s/^alias.// -e s/\\ /\\ $(printf \"\\043\")--\\>\\ / | column -t -s $(printf \"\\043\")
  add-fetch       = "!sh -c 'git config --add remote.$0.fetch \"+refs/heads/$1:refs/remotes/$0/$1\"'"

  # deprecated
  show-cmd        = "!f() { \
                              sep="㊣" ;\
                              name=${1:-alias};\
                              echo "$name"; \
                              git config --get-regexp ^$name\\..*$2+ | \
                              cut -c 1-40 | \
                              sed -e s/^$name.// \
                              -e s/\\ /\\ $(printf $sep)--\\>\\ / | \
                              column -t -s $(printf $sep) | \
                          }; f \
                    "

# vim: ts=2 sts=2 sw=2 et ft=gitconfig
