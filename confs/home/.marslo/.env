#!/usr/bin/env bash
#shellcheck disable=SC2034,SC2154,SC2155,SC2086

# Color configure in ls
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced
# export LS_COLORS='no=00:fi=00:di=01;31:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:'
eval "$(/usr/local/opt/coreutils/libexec/gnubin/dircolors ${iRCHOME}/.colors)"
export EDITOR=vim
export KEYTIMEOUT=1
export QUOTING_STYLE=literal
export TERM=xterm-256color

# The color of man page
export LESS_TERMCAP_mb=$(printf "\\e[1;31m")         # begin blinding
export LESS_TERMCAP_md=$(printf "\\e[1;31m")         # begin bold
export LESS_TERMCAP_me=$(printf "\\e[0m")            # end mode
export LESS_TERMCAP_se=$(printf "\\e[0m")            # end stadout-mode
export LESS_TERMCAP_so=$(printf "\\e[1;44;33m")      # begin stadout-mode - info box
export LESS_TERMCAP_ue=$(printf "\\e[0m")            # end underline
export LESS_TERMCAP_us=$(printf "\\e[1;32m")         # begin underline
export LESS='-eirMXR'
# export LESS="-eirMX"
export SYSTEMD_LESS=FRXMK
export GROFF_NO_SGR=1                                # For Konsole and Gnome-terminal
export MANPAGER='less -s -M +Gg'

# [using vim as man-page](https://vim.fandom.com/wiki/Using_vim_as_a_man-page_viewer_under_Unix)
export PAGER="/bin/sh -c \"unset PAGER;col -b -x | \
    vim -R -c 'set ft=man nomod nolist' -c 'map q :q<CR>' \
    -c 'map <SPACE> <C-D>' -c 'map b <C-U>' \
    -c 'nmap K :Man <C-R>=expand(\\\"<cword>\\\")<CR><CR>' -\""

# The setting about history
export HISTTIMEFORMAT='%F %T '
export HISTFILESIZE=10000
export HISTSIZE=10000
export HISTCONTROL=ignoreboth:erasedups

# for bash-complication@2 & gradle-complication
export GRADLE_COMPLETION_EXCLUDE_PATTERN='/(integTest|samples|smokeTest|testFixtures|templates|out|features)/'

export LANG=en_US.UTF-8
export LANGUAGE=$LANG
export LC_COLLATE=$LANG
export LC_CTYPE=$LANG
export LC_MESSAGES=$LANG
export LC_MONETARY=$LANG
export LC_NUMERIC=$LANG
export LC_TIME=$LANG
export LC_ALL=$LANG

MARSLO_BINS="${iRCHOME}/bin"
USR_LOCAL="/usr/local"

if [[ -x /usr/bin/sw_vers ]] && /usr/bin/sw_vers | grep -E '\s*[mM]ac\s*OS\s*X?' >/dev/null; then
  OPENLDAP_HOME='/usr/local/opt/openldap'
  CURL_OPENSSL_HOME='/usr/local/opt/curl'                                           # via: brew install curl-openssl (https://stackoverflow.com/a/49798271/2940319)
  OPENSSL_HOME='/usr/local/opt/openssl@1.1'                                         # OPENSSL_HOME="$(brew --prefix openssl)"
  LIBRESSL_HOME='/usr/local/opt/libressl'
  GIT_EXTRAS='/usr/local/opt/git-extras'                                            # GIT_EXTRAS="$(brew --prefix git-extras)"

  BINUTILS='/usr/local/opt/binutils'
  GNUBINHOME='/usr/local/opt/coreutils/libexec/gnubin'
  GNUMANHOME='/usr/local/opt/coreutils/libexec/gnuman'
  GNUWHICH='/usr/local/opt/gnu-which/libexec/gnubin'
  GNUGREP='/usr/local/opt/grep/libexec/gnubin'
  GNUGETOPT='/usr/local/opt/gnu-getopt/bin'
  GNUTAR='/usr/local/opt/gnu-tar/libexec/gnubin'
  GNUFIND='/usr/local/opt/findutils/libexec/gnubin'
  GNUINDENT='/usr/local/opt/gnu-indent/libexec/gnubin'
  GNUSED='/usr/local/opt/gnu-sed/libexec/gnubin'
  INETUTILS='/usr/local/opt/inetutils/libexec/gnubin'
  GUILE_TLS_CERTIFICATE_DIRECTORY='/usr/local/etc/gnutls/'

  GNU_PATH="${GNUBINHOME}"
  GNU_PATH+=":${GNUBINHOME}"
  GNU_PATH+=":${GNUWHICH}"
  GNU_PATH+=":${GNUGETOPT}"
  GNU_PATH+=":${GNUGREP}"
  GNU_PATH+=":${GNUTAR}"
  GNU_PATH+=":${GNUFIND}"
  GNU_PATH+=":${GNUINDENT}"
  GNU_PATH+=":${GNUSED}"
  GNU_PATH+=":${BINUTILS}/bin"

  GRADLE_HOME='/opt/gradle/gradle-4.8'
  M2_HOME='/opt/maven/apache-maven-3.5.0'
  M2=$M2_HOME/bin
  MAVEN_OPTS='-Xms512m -Xmx1G'
  ANDROID_HOME='/opt/android'
  ANDROID_NDK_HOME="$ANDROID_HOME/android-ndk"

  # JAVA_HOME=$(/usr/libexec/java_home)
  # JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.8.0_271.jdk/Contents/Home'
  # GROOVY_HOME='/usr/local/opt/groovy/libexec'
  # GROOVY_HOME='/opt/groovy-3.0.7'
  # https://docs.oracle.com/en/java/javase/11/install/installation-jdk-macos.html
  JAVA_HOME=$(/usr/libexec/java_home -v 11)
  GROOVY_HOME=$(brew --prefix)/opt/groovy/libexec
  CLASSPATH=".:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$GROOVY_HOME/lib"

  NODE_HOME='/usr/local/opt/node@12'
  HOMEBREW_SBIN='/usr/local/sbin'
  MYSQL_HOME='/usr/local/mysql'
  MACVIM_HOME='/Applications/MacVim.app'
  ITERM2_ADDITIONAL="${HOME}/.iterm2"

  PYTHON_HOME='/usr/local/opt/python@3.10'                                          # PYTHON_HOME='/usr/local/opt/python/libexec/bin'
  TCLTK_HOME='/usr/local/opt/tcl-tk'                                                # TCLTK_HOME="$(brew --prefix tcl-tk)"
  PYTHONPATH='/usr/local/lib/python3.10/site-packages'
  PYTHONUSERBASE="$(${PYTHON_HOME}/libexec/bin/python -c 'import site; print(site.USER_BASE)')"   # PYTHONUSERBASE=$PYTHONPATH
  PYTHON_CONFIGURE_OPTS="--with-tcltk-includes='-I${TCLTK_HOME}/include' --with-tcltk-libs='-L${TCLTK_HOME}/lib -ltcl8.6 -ltk8.6'"

  SQLITE_HOME='/usr/local/opt/sqlite'
  RUBY_HOME='/usr/local/opt/ruby'                                                   # RUBYLOCAL="$HOME/.rbenv/shims"
  RUBYGEM="${HOME}/.gem/ruby/2.6.0/bin"
  RUBY_CONFIGURE_OPTS="--with-openssl-dir=${OPENSSL_HOME}"

  SCRIPT_BINS="${TCLTK_HOME}/bin"
  SCRIPT_BINS+=":${PYTHON_HOME}/libexec/bin"
  SCRIPT_BINS+=":${PYTHONUSERBASE}/bin"
  SCRIPT_BINS+=":${NODE_HOME}/bin"
  SCRIPT_BINS+=":${JAVA_HOME}/bin"
  SCRIPT_BINS+=":${GROOVY_HOME}/bin"
  SCRIPT_BINS+=":${RUBY_HOME}/bin"
  SCRIPT_BINS+=":${RUBYGEM}"
  SCRIPT_BINS+=":${GIT_EXTRAS}/bin"
  # SCRIPT_BINS+=":${PYENV_ROOT}/bin"     # Shell: bash 3.2.57

  UTLS_PATH="${OPENLDAP_HOME}/bin"
  UTLS_PATH+=":${OPENLDAP_HOME}/sbin"
  UTLS_PATH+=":${CURL_OPENSSL_HOME}/bin"
  UTLS_PATH+=":${OPENSSL_HOME}/bin"
  UTLS_PATH+=":${INETUTILS}"
  UTLS_PATH+=":/usr/local/opt/file-formula/bin"
  UTLS_PATH+=":/usr/local/opt/gettext/bin"

  LDFLAGS="-L${OPENLDAP_HOME}/lib"
  LDFLAGS+=" -L${CURL_OPENSSL_HOME}/lib"
  LDFLAGS+=" -L${TCLTK_HOME}/lib"
  LDFLAGS+=" -L${BINUTILS}/lib"
  LDFLAGS+=" -L${PYTHON_HOME}/lib"
  LDFLAGS+=" -L${SQLITE_HOME}/lib"
  LDFLAGS+=" -L$(brew --prefix)/lib"
  LDFLAGS+=" -L/usr/local/opt/readline/lib"
  LDFLAGS+=" -L${OPENSSL_HOME}/lib"
  LDFLAGS+=" -L${NODE_HOME}/lib"
  LDFLAGS+=" -L${LIBRESSL_HOME}/lib"

  CPPFLAGS="-I${OPENLDAP_HOME}/include"
  CPPFLAGS+=" -I${CURL_OPENSSL_HOME}/include"
  CPPFLAGS+=" -I${TCLTK_HOME}/include"
  CPPFLAGS+=" -I${BINUTILS}/include"
  CPPFLAGS+=" -I${SQLITE_HOME}/include"
  CPPFLAGS+=" -I$(brew --prefix)/include"
  CPPFLAGS+=" -I/usr/local/opt/readline/include"
  CPPFLAGS+=" -I${OPENSSL_HOME}/include"
  CPPFLAGS+=" -I${NODE_HOME}/include"
  CPPFLAGS+=" -I${LIBRESSL_HOME}/include"

  PKG_CONFIG_PATH="${CURL_OPENSSL_HOME}/lib/pkgconfig"
  PKG_CONFIG_PATH+=":${TCLTK_HOME}/lib/pkgconfig"
  PKG_CONFIG_PATH+=":/usr/local/Homebrew/Library/Homebrew/os/mac/pkgconfig/11.1"
  PKG_CONFIG_PATH+=":${SQLITE_HOME}/lib/pkgconfig"
  PKG_CONFIG_PATH+=":${OPENSSL_HOME}/lib/pkgconfig"
  PKG_CONFIG_PATH+=":${PYTHON_HOME}/lib/pkgconfig"
  PKG_CONFIG_PATH+=":${RUBY_HOME}/lib/pkgconfig"
  PKG_CONFIG_PATH+=":${LIBRESSL_HOME}/lib/pkgconfig"
  PKG_CONFIG_PATH+=":${PKG_CONFIG_PATH}"

  CFLAGS="-I${TCLTK_HOME}/include"

  TEMP_PATH="${GNU_PATH}"
  TEMP_PATH+=":${USR_LOCAL}/bin"
  TEMP_PATH+=":${SQLITE_HOME}/bin"
  TEMP_PATH+=":${MACVIM_HOME}/Contents/bin"
  TEMP_PATH+=":${MARSLO_BINS}"
  TEMP_PATH+=":${HOMEBREW_SBIN}"
  TEMP_PATH+=":${UTLS_PATH}"
  TEMP_PATH+=":${ITERM2_ADDITIONAL}"
  TEMP_PATH+=":${SCRIPT_BINS}"

  TEMP_MANPATH="$GNUMANHOME"
  TEMP_MANPATH+=":/usr/local/share/man"
  TEMP_MANPATH+=":/usr/share/man"
  TEMP_MANPATH+=":/usr/local/man"
  TEMP_MANPATH+=":/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/share/man"

  # PATH="${GNU_PATH}:${SQLITE_HOME}/bin:${MACVIM_HOME}/Contents/bin:${MARSLO_BINS}:${HOMEBREW_SBIN}:${UTLS_PATH}:${ITERM2_ADDITIONAL}:${SCRIPT_BINS}:$PATH"
  PATH="$TEMP_PATH:$PATH"
  MANPATH="$TEMP_MANPATH:$MANPATH"

  export JAVA_HOME GROOVY_HOME PATH MANPATH
  export GUILE_TLS_CERTIFICATE_DIRECTORY PYTHONPATH PYTHONUSERBASE CLASSPATH LDFLAGS CPPFLAGS RUBY_CONFIGURE_OPTS PKG_CONFIG_PATH CFLAGS
fi

# export M2_HOME M2 MAVEN_OPTS
# PATH=$MYSQL_HOME/bin:$HOMEBREW_SBIN:$GNUBINHOME:$M2:$GRADLE_HOME/bin:"/Applications/Visual Studio Code.app/Contents/Resources/app/bin":/usr/local/opt/file-formula/bin:/usr/local/opt/gettext/bin:$TCLTK_HOME/bin:$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$GROOVY_HOME
# export MYSQL_HOME JAVA_HOME CLASSPATH GROOVY_HOME GRADLE_HOME M2_HOME M2 MAVEN_OPTS ANDROID_HOME ANDROID_NDK_HOME PATH MANPATH PYTHONPATH
export PATH MANPATH

export GOOGLE_API_KEY=''
export GOOGLE_DEFAULT_CLIENT_ID=''
export GOOGLE_DEFAULT_CLIENT_SECRET=''
# export HOMEBREW_GITHUB_API_TOKEN="80cf3215764805c0d385ecb7ac7c6c87df799424"
export HOMEBREW_INSTALL_BADGE='☕️ 🐸'

export ARMLMD_LICENSE_FILE=''
export RMK_HOST=''
export SRVPW=''

# ┌─ (USERNAME@HOSTNAME PATH) - [keymap] - (git-branch) ->
# └─ $

#  ----+---+---+----+---+----       --------+--------
# | ⌌・| ⠋ | ⌜ | ╭╶ | ┌ | ┌─ |    | 0\;xxm | Normal |
# | ⌎・| ⠦ | ⌞ | ╰╶ | └ | └─ |    | 1\;xxm | Bright |
#  ----+---+---+----+---+----      --------+--------
#  --------------+-------------
# | Black        | \e[0;30m    |   ----------------+---------------------------------
# | Blue         | \e[0;34m    |  | \[\e[xx;0m]\]  | system color                    |
# | Green        | \e[0;32m    |  | \[\e[xx\;0m]\] | system color in ``              |
# | Cyan         | \e[0;36m    |  | \[\e[0;xxm]\]  | profile color (solarized)       |
# | Red          | \e[0;31m    |  | \[\e[0\;xxm]\] | profile color (solarized) in `` |
# | Purple       | \e[0;35m    |   ----------------+---------------------------------
# | Brown        | \e[0;33m    |
# | Gray         | \e[0;37m    |
# | Dark Gray    | \e[1;30m    |   ----------------+-------------------------------
# | Light Blue   | \e[1;34m    |  | COL_NONE       | no color                      |
# | Light Green  | \e[1;32m    |  | COL_RESET      | reset color                   |
# | Light Cyan   | \e[1;36m    |  | COL_DEFAULT    | default color                 |
# | Light Red    | \e[1;31m    |  | COL_IF_DEFAULT | default color in if-statement |
# | Light Purple | \e[1;35m    |   ----------------+-------------------------------
# | Yellow       | \e[1;33m    |
# | White        | \e[1;37m    |
#  --------------+-------------

UMARK='\[\033(0\]l\[\033(B\]'
DMARK='\[\033(0\]m\[\033(B\]'
LMARK='\[\033(0\]q\[\033(B\]'

# if [ -z "$DISPLAY" ]; then
#   export PS1="\n${COL_DBLACK}┌─ (\u@\h ${COL_RESET} ${COL_DRED}\w${COL_RESET}${COL_DBLACK}) ->${COL_RESET}\n${COL_DBLACK}└─ ${COL_RESET}\`if [ \$? = 0 ]; then echo ${COL_SDBLACK}\\$ ${COL_RESET}; else echo ${COL_SDRED}\\$ ${COL_RESET}; fi\`${COL_NONE}"
#   export PS2="${COL_DBLACK} -> ${COL_RESET}${COL_NONE}"
# else
#   export PS1="\n${COL_DBLACK}${UMARK}${LMARK} (\u@\h ${COL_RESET} ${COL_DRED}\w${COL_RESET}${COL_DBLACK}) ->${COL_RESET}\n${COL_DBLACK}${DMARK}${LMARK} ${COL_RESET}\`if [ \$? = 0 ]; then echo ${COL_SDBLACK}\\$ ${COL_RESET}; else echo ${COL_SDRED}\\$ ${COL_RESET}; fi\`${COL_NONE}"
#   export PS2="${COL_DBLACK} ->${LMARK} ${COL_RESET}${COL_NONE}"
# fi

COL_SDGREEN='\[\033[32;2m\]'
# COL_SDGREEN='\[\033[2;32m\]'
COL_SLGREEN='\[\033[32;0m\]'
COL_SDYELLOW='\[\033[2;33m\]'
COL_SLYELLOW='\[\033[0;33m\]'
COL_BYELLOW='\[\033[2;33m\]'
COL_IF_SDYELLOW='\[\033[2\;33m\]'

COL_DBLACK='\[\033[30;1m\]'
COL_LBLACK='\[\033[30;0m\]'
COL_SDBLACK='\[\033[1;30m\]'
COL_SLBLACK='\[\033[0;30m\]'
COL_SDRED='\[\033[1;31m\]'
COL_SLRED='\[\033[0;31m\]'
COL_SDBLUE='\[\033[1;34m\]'
COL_SLBLUE='\[\033[0;34m\]'
COL_LRED='\[\033[31;0m\]'
COL_DRED='\[\033[31;1m\]'

COL_IF_DBLACK='\[\033[30\;1m\]'
COL_IF_LBLACK='\[\033[30\;0m\]'
COL_IF_SDBLACK='\[\033[1\;30m\]'
COL_IF_SLBLACK='\[\033[0\;30m\]'
COL_IF_DRED='\[\033[31\;1m\]'
COL_IF_SDRED='\[\033[1\;31m\]'
COL_IF_SLRED='\[\033[0\;31m\]'
COL_IF_SLGREEN='\[\033[0\;32m\]'
COL_IF_SDGREEN='\[\033[1\;32m\]'
COL_IF_SLBLUE='\[\033[0\;34m\]'
COL_IF_SDBLUE='\[\033[1\;34m\]'

# 38;5; for the foreground and 48;5; for the background
# https://unix.stackexchange.com/a/124409/29178
function RGBcolor {
  echo "16 + $1 * 36 + $2 * 6 + $3" | bc
}

function rightPrompt() {
  if [ "$(bind -v | awk '/keymap/ {print $NF}')" == 'emacs' ]; then
    kmap=⌁
  else
    kmap=⚙︎
  fi
  printf "%*s" $COLUMNS "${kmap}"
  # add this to PS1: \[$(tput sc; rightPrompt; tput rc)\]
}

function showKeyMap() {
  RET=$?
  bind -v | awk '/keymap/ {print $NF}'
  return "${RET}"
}

# COL_RESET='\[\033[1m\]'
# COL_DEFAULT="\[\033[1;38;5;${fgc}m\]"  | "${COL_SDGREEN}"
# COL_IF_DEFAULT="${COL_IF_SDGREEN}"

# For Mac os -> Solarized Dark
# export PS1="\n${COL_DEFAULT}┌─ (\u@\h${COL_RESET} ${COL_SDRED}\w${COL_RESET}${COL_DEFAULT}) ->${COL_RESET}\n${COL_DEFAULT}└─ ${COL_RESET}\`if [ \$? = 0 ]; then echo ${COL_IF_DEFAULT}\\$ ${COL_RESET}; else echo ${COL_IF_SLRED}\\$ ${COL_RESET}; fi\`${COL_NONE}"

# fgc=$(RGBcolor 5 6 8)                         # 240
fgc=$(RGBcolor 5 6 5)                         # 237
# https://gist.github.com/joseluisq/1e96c54fa4e1e5647940?permalink_comment_id=3582049#gistcomment-3582049
COL_DEFAULT=$"\e[38;5;${fgc}m"                # COL_DEFAULT="\[$(tput setaf 237)\]"
COL_IF_DEFAULT="\[\033[1\;38\;5\;${fgc}m\]"
COL_RESET='\[\033[1m\]'                       # COL_RESET="\[$(tput sgr0)\]"
COL_NONE='\[\033[0m\]'

PS1="\\n${COL_RESET}${COL_DEFAULT}╭╶ (\\u@\\h${COL_RESET} "
PS1+="${COL_SLRED}\\w${COL_RESET}${COL_DEFAULT}) "
PS1+="- [\$(showKeyMap)] "
PS1+="\$(__git_ps1 \"- (${COL_SDGREEN}%s${COL_NONE}${COL_DEFAULT}) \")${COL_RESET}"
PS1+="${COL_DEFAULT}->${COL_RESET}"
PS1+="\\n${COL_DEFAULT}╰╶ ${COL_RESET}"
PS1+="\`if [ \$? = 0 ]; then echo ${COL_IF_DEFAULT}\\$; else echo ${COL_IF_SLRED}\\$; fi\` ${COL_RESET}"
PS1+="${COL_NONE}"
export PS1
export PS2="${COL_DEFAULT}  -> ${COL_RESET}${COL_NONE}"

export JENKINS_URL='my.jenkins.com'
