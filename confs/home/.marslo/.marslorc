#!/usr/bin/env bash
# shellcheck disable=SC2034,SC1090,SC1091,SC2182,SC2181,SC1094
# =============================================================================
#   FileName : .marslorc
#     Author : marslo.jiao@gmail.com
#    Created : 2012
# LastChange : 2023-10-08 05:35:22
# =============================================================================

export iRCHOME="$HOME/.marslo"
source <( cat "${iRCHOME}"/.{env,gitrc} )

# /--------------------------------------------------------------
#                            _      _   _
#                           | |    | | (_)
#   ___ ___  _ __ ___  _ __ | | ___| |_ _  ___  _ __
#  / __/ _ \| '_ ` _ \| '_ \| |/ _ \ __| |/ _ \| '_ \
# | (_| (_) | | | | | | |_) | |  __/ |_| | (_) | | | |
#  \___\___/|_| |_| |_| .__/|_|\___|\__|_|\___/|_| |_|
#                     | |
#                     |_|
#
# --------------------------------------------------------------/
GROOVY_HOME='/opt/groovy-3.0.7'
ANSIBLE_COMPLETION_PATH="${iRCHOME}/.completion/ansible-completion"            # https://github.com/dysosmus/ansible-completion
# NPM_COMPLETION_PATH="/usr/local/lib/node_modules/npm-completion"             # https://github.com/Jephuff/npm-bash-completion
RT_COMPLETION="$HOME/.jfrog/jfrog_bash_completion"

## for osx
if [[ -x /usr/bin/sw_vers ]] && [[ 'macOS' = $(/usr/bin/sw_vers --productName) ]]; then
  HOMEBREW_PREFIX="$(brew --prefix)"
  BASH_COMPLETION_DIR="${HOMEBREW_PREFIX}/etc/bash_completion.d"
  # BASH_COMPLETION="${HOMEBREW_PREFIX}/opt/bash-completion/etc/bash_completion"
  BASH_COMPLETION="${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"        # for bash_completion 1.3
  BASH_COMPLETION_2="${HOMEBREW_PREFIX}/opt/bash-completion@2/etc/profile.d/bash_completion.sh"
  # BASH_COMPLETION_2_DIR=$(pkg-config --variable=completionsdir bash-completion)
  ADDITIONAL_COMPLETION="${iRCHOME}/.completion/bash_completion_init_completion"
  GIT_COMPLETION_DIR="${HOMEBREW_PREFIX}/opt/git/etc/bash_completion.d"
  MACCLI_COMPLETION='/usr/local/bin/mac-cli/completion/bash_completion'
  # VBOX_COMPLETION="${iRCHOME}/.completion/vbox/VBoxManage-completion.bash"   # ╮ https://github.com/gryf/vboxmanage-bash-completion
                                                                               # ╯ https://github.com/mug896/virtualbox-bash-completion
  if command -v brew > /dev/null; then
    if test -d "${BASH_COMPLETION_DIR}"; then
      source <( cat "${BASH_COMPLETION_DIR}"/{brew,tmux,tig-completion.bash} )
      # export BASH_COMPLETION_COMPAT_DIR="${BASH_COMPLETION_DIR}"
      # shellcheck disable=SC1091
      test -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"       && source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
      test -f "${BASH_COMPLETION}"                                        && source "${BASH_COMPLETION}"
      ls "${BASH_COMPLETION_DIR}"/*git*    >/dev/null 2>&1;  [ $? -eq 0 ] && source "${BASH_COMPLETION_DIR}"/*git*
      ls "${BASH_COMPLETION_DIR}"/*docker* >/dev/null 2>&1;  [ $? -eq 0 ] && source "${BASH_COMPLETION_DIR}"/*docker*
    fi

    # for complete_alias (https://raw.githubusercontent.com/cykerway/complete-alias/master/complete_alias)
    # test -f "${BASH_COMPLETION_2}"      && source <( cat "${BASH_COMPLETION_2}" )     # or source "${BASH_COMPLETION_2}";
    # workaround: https://github.com/mobile-shell/mosh/issues/675#issuecomment-156457108
    # test -f "${ADDITIONAL_COMPLETION}"  && source "${ADDITIONAL_COMPLETION}"
    # test -f "${VBOX_COMPLETION}"        && source "${VBOX_COMPLETION}"
    # test -f "${MACCLI_COMPLETION}"      && source "${MACCLI_COMPLETION}"
  fi
  # shellcheck disable=SC1091
  test -e "$HOME/.iterm2_shell_integration.bash" && source "$HOME/.iterm2_shell_integration.bash"  # iTerm2 shell integration
  test -f "$HOME/.docker/init-bash.sh"           && source "$HOME/.docker/init-bash.sh"            # docker desktop
  test -f "${iRCHOME}"/.imac                     && source <( cat "${iRCHOME}"/.imac )
## for Ubuntu/RHEL/CentOS
elif [ -f '/etc/os-release' ]; then
  distrab=$(awk -F= '$1=="ID" {print $2;}' /etc/os-release)
  GIT_COMPLETION_DIR="/usr/share/doc/git/contrib/completion"

  [[ 'ubuntu' == "${distrab}" ]] || [[ 'centos' == "${distrab}" ]] || [[ 'rhel' == "${distrab}" ]] && file="$HOME/.bashrc"
  # git
  test -f "${GIT_COMPLETION_DIR}"/git-completion.bash && source /usr/share/doc/git/contrib/completion/git-completion.bash
  test -f "${GIT_COMPLETION_DIR}"/git-prompt.sh       && source /usr/share/doc/git/contrib/completion/git-prompt.sh
  test -f "${iRCHOME}"/.irhel                         && source <( cat "${iRCHOME}"/.irhel )
fi

# find "${GROOVY_HOME}/bin" -name '*_completion' -print0 | xargs -0 -I FILE bash -c "source FILE"
test -d "${GROOVY_HOME}/bin"                         && source <( cat "${GROOVY_HOME}"/bin/*_completion )
test -d "${ANSIBLE_COMPLETION_PATH}"                 && source <( cat "${ANSIBLE_COMPLETION_PATH}"/*.bash )
test -f "${iRCHOME}/.completion/.bash_completion.sh" && source <( cat "${iRCHOME}/.completion/.bash_completion.sh" )
test -f "${RT_COMPLETION}"                           && source "${RT_COMPLETION}"
test -f "${iRCHOME}"/utils/enhancd/init.sh           && source "${iRCHOME}"/utils/enhancd/init.sh          # enhancd
test -f ~/.fzf.bash                                  && source ~/.fzf.bash
command -v kubectl > /dev/null                       && source <( kubectl completion bash )
command -v npm     > /dev/null                       && source <( npm completion )
command -v vault   > /dev/null                       && complete -C /usr/local/bin/vault vault
command -v pipx    > /dev/null                       && eval "$(register-python-argcomplete pipx)"
command -v pip     > /dev/null                       && eval "$(pip completion --bash)"
# _pip_completion() {
#   COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" COMP_CWORD=$COMP_CWORD PIP_AUTO_COMPLETE=1 $1 2>/dev/null ) )
# }
# complete -o default -F _pip_completion /usr/local/bin/python3 -m pip
# shellcheck disable=SC1091
[[ $- == *i* ]] && test -f "${iRCHOME}/utils/fzf/shell/completion.bash" && source "${iRCHOME}/utils/fzf/shell/completion.bash" 2> /dev/null
# shellcheck disable=SC1091
test -f "${iRCHOME}/utils/fzf/shell/key-bindings.bash"                  && source "${iRCHOME}/utils/fzf/shell/key-bindings.bash"

# eval "$(rbenv init -)"

# /--------------------------------------------------------------
#                   __ _
#                  / _(_)
#   ___ ___  _ __ | |_ _  __ _
#  / __/ _ \| '_ \|  _| |/ _` |
# | (_| (_) | | | | | | | (_| |
#  \___\___/|_| |_|_| |_|\__, |
#                         __/ |
#                        |___/
#
# --------------------------------------------------------------/
shopt -s cdspell
shopt -s cmdhist
shopt -s histappend
# shopt -s extdebug

### disable ctrl+s lock putty : # stty -echo; stty stop undef; stty start undef
# to avoid issues: [here](https://stackoverflow.com/a/25391867/2940319)
# - tput : No value for $TERM and no -T specified
# - stty : 'standard input': Inappropriate ioctl for device
if [[ $- == *i*  ]]; then
  stty ixany
  stty ixoff -ixon
  test -f ~/.LESS_TERMCAP && source ~/.LESS_TERMCAP
fi

# /--------------------------------------------------------------
#  _                                     _
# | |                                   | |
# | |_ ___ _ __ _ __ ___ ______ ___ ___ | | ___  _ __
# | __/ _ \ '__| '_ ` _ \______/ __/ _ \| |/ _ \| '__|
# | ||  __/ |  | | | | | |    | (_| (_) | | (_) | |
#  \__\___|_|  |_| |_| |_|     \___\___/|_|\___/|_|
#
#
# --------------------------------------------------------------/
export TERM='xterm-color'
# CentOS or RHEL
test -e /usr/share/terminfo/x/xterm-256color  && export TERM='xterm-256color'
# Ubuntu
test -e /lib/terminfo/x/xterm-256color        && export TERM='xterm-256color'
# cygwin && osx
test -e /usr/share/terminfo/78/xterm-256color && export TERM='xterm-256color'

# test -f /usr/local/bin/screenfetch          && /usr/local/bin/screenfetch
test -f "${iRCHOME}"/bin/screenfetch-dev      && bash   "${iRCHOME}"/bin/screenfetch-dev
test -f "${iRCHOME}"/bin/now                  && bash   "${iRCHOME}"/bin/now
test -f "${iRCHOME}"/.tmux-session            && source "${iRCHOME}"/.tmux-session

if test -f '/usr/local/opt/coreutils/libexec/gnubin/ls'; then
  LS='/usr/local/opt/coreutils/libexec/gnubin/ls'
elif test -f '/usr/bin/ls'; then
  LS='/usr/bin/ls'
elif test -f '/bin/ls'; then
  LS='/bin/ls'
else
  LS="$(\which -a ls | head)"
fi

if test -f '/usr/local/opt/grep/libexec/gnubin/grep'; then
  GREP='/usr/local/opt/grep/libexec/gnubin/grep'
elif test -f '/usr/bin/grep'; then
  GREP='/usr/bin/grep'
elif test -f '/bin/grep'; then
  GREP='/bin/grep'
else
  GREP="$(\which -a grep | head)"
fi

# for public server (use common account)
function bello() {
  source <( cat "${iRCHOME}"/.{completion/.bash_completion.sh,imac,env,.gitrc}; )
  source <( cat "${iRCHOME}"/bin/{ifunc,ii,ig,irt,im}.sh; )
  # set -o vi
}

# for public account server
# set -o vi;
# shellcheck disable=SC1091
function bye() { source "${iRCHOME}"/.bye; }

# ┌───────┬─────────┬──────────────────┐   ┌──────┬─────────────────┬──────────┐
# │ Fg/Bg │ Style   │ Octal            │   │ Code │ Style           │ Octal    │
# ├───────┼─────────┼──────────────────┤   ├──────┼─────────────────┼──────────┤
# │  K/k  │ Black   │ \033[ + 3/4 + 0m │   │   s  │ Bold (strong)   │ \033[1m  │
# │  R/r  │ Red     │ \033[ + 3/4 + 1m │   │   u  │ Underline       │ \033[4m  │
# │  G/g  │ Green   │ \033[ + 3/4 + 2m │   │   f  │ Blink (flash)   │ \033[5m  │
# │  Y/y  │ Yellow  │ \033[ + 3/4 + 3m │   │   n  │ Negative        │ \033[7m  │
# │  B/b  │ Blue    │ \033[ + 3/4 + 4m │   ├──────┼─────────────────┼──────────┤
# │  M/m  │ Magenta │ \033[ + 3/4 + 5m │   │   S  │ Normal (unbold) │ \033[22m │
# │  C/c  │ Cyan    │ \033[ + 3/4 + 6m │   │   0  │ Reset           │ \033[0m  │
# │  W/w  │ White   │ \033[ + 3/4 + 7m │   └──────┴─────────────────┴──────────┘
# └───────┴─────────┴──────────────────┘
#
# references:
#  - [WAOW! Complete explanations](https://stackoverflow.com/a/28938235/101831)
#  - [coloring functions](https://gist.github.com/inexorabletash/9122583)
# credit belongs to https://raw.githubusercontent.com/ppo/bash-colors/master/bash-colors.sh
c() {
  # shellcheck disable=SC2015,SC2028
  [ $# -eq 0 ] && echo "\033[0m" || echo "$1" | sed -E "s/(.)/‹\1›/g;s/([KRGYBMCW])/3\1/g;s/([krgybmcw])/4\1/g;s/S/22/;y/sufnKRGYBMCWkrgybmcw›/14570123456701234567m/;s/‹/\\\033[/g";
}

# /--------------------------------------------------------------
#                   __
#                  / _|
#  _ __ ___  _   _| |_ _   _ _ __   ___
# | '_ ` _ \| | | |  _| | | | '_ \ / __|
# | | | | | | |_| | | | |_| | | | | (__
# |_| |_| |_|\__, |_|  \__,_|_| |_|\___|
#             __/ |
#            |___/
# --------------------------------------------------------------/
source <( cat "${iRCHOME}"/bin/{ifunc,ii,ig,irt,im}.sh )
# source "${iRCHOME}/bin/idisable"

# vim:tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=sh:foldmethod=marker:foldmarker=#\ --------------------------------------------------------------/,#\ /--------------------------------------------------------------
