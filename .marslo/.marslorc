#!/usr/bin/env bash
# shellcheck source=/dev/null disable=SC2034
# =============================================================================
#   FileName : .marslorc
#     Author : marslo.jiao@gmail.com
#    Created : 2012
# LastChange : 2025-10-20 10:01:48
# =============================================================================

export iRCHOME="$HOME/.marslo"
# credit: https://github.com/ppo/bash-colors/blob/master/bash-colors.sh (v0.3.0)
source "${iRCHOME}/bin/bash-color.sh"

function isWSL()     { if uname -r | command grep --color=never -q -i 'microsoft'; then echo 1; fi; }
function isCygwin()  { [[ $(uname -s) =~ 'CYGWIN_NT'  ]] && echo 1; }
function isGitBash() { [[ $(uname -s) =~ 'MINGW64_NT' ]] && echo 1; }
function isOSX()     { [[ 'Darwin' = $(uname -s)      ]] && echo 1; }
function isLinux()   { [[ '1' != "$(isWSL)"  ]] && [[ 'Linux'  = $(uname -s) ]] && echo 1; }
function isDebian()  { [[ -f /etc/os-release ]] && [[ 'debian' = $(awk -F '='    '/^ID_LIKE/ { print $2 }' /etc/os-release) ]] && echo 1; }
function isFedora()  { [[ -f /etc/os-release ]] && [[ 'fedora' = $(awk -F '='    '/^ID=/ { print $2 }' /etc/os-release)     ]] && echo 1; }
function isUbuntu()  { [[ -f /etc/os-release ]] && [[ 'ubuntu' = $(awk -F '='    '/^ID=/ { print $2 }' /etc/os-release)     ]] && echo 1; }
function isRHEL()    { [[ -f /etc/os-release ]] && [[ 'rhel'   = $(awk -F '[="]' '/^ID=/ { print $3 }' /etc/os-release)     ]] && echo 1; }
function isCentOS()  { [[ -f /etc/os-release ]] && [[ 'centos' = $(awk -F '[="]' '/^ID=/ { print $3 }' /etc/os-release)     ]] && echo 1; }
# for public server (use common account)
function bello()     { source ~/.marslo/.marslorc; set -o vi;  }
function bye()       { source "${iRCHOME}"/.bye; set -o emacs; }


# /--------------------------------------------------------------
#      _       __            _ _     _              _
#     | |     / _|          | | |   | |            | |
#   __| | ___| |_ __ _ _   _| | |_  | |_ ___   ___ | |___
#  / _` |/ _ \  _/ _` | | | | | __| | __/ _ \ / _ \| / __|
# | (_| |  __/ || (_| | |_| | | |_  | || (_) | (_) | \__ \
#  \__,_|\___|_| \__,_|\__,_|_|\__|  \__\___/ \___/|_|___/
#
# --------------------------------------------------------------/
LS="$(type -P ls)"
GREP="$(type -P grep)"
COLUMN="$(type -P column)"

if [[ '1' = "$(isOSX)" ]] && [[ 0 = $(type -P brew >/dev/null; echo $?) ]]; then
  test -x "$(brew --prefix)/bin/gls"               && LS="$(brew --prefix)/bin/gls"
  test -x "$(brew --prefix)/bin/ggrep"             && GREP="$(brew --prefix)/bin/ggrep"
  test -x "$(brew --prefix util-linux)/bin/column" && COLUMN="$(brew --prefix util-linux)/bin/column"
else
  test -x '/usr/bin/ls'   && LS='/usr/bin/ls'      || LS='/bin/ls'
  test -x '/usr/bin/grep' && GREP='/usr/bin/grep'  || GREP='/bin/grep'
fi

COPY=''
[[ '1' = "$(isWSL)" ]]    && COPY='/mnt/c/Windows/System32/clip.exe'
[[ '1' = "$(isOSX)" ]]    && COPY="$(type -P pbcopy)"

# /--------------------------------------------------------------
#                            _      _   _
#                           | |    | | (_)
#   ___ ___  _ __ ___  _ __ | | ___| |_ _  ___  _ __
#  / __/ _ \| '_ ` _ \| '_ \| |/ _ \ __| |/ _ \| '_ \
# | (_| (_) | | | | | | |_) | |  __/ |_| | (_) | | | |
#  \___\___/|_| |_| |_| .__/|_|\___|\__|_|\___/|_| |_|
#                     | |
#                     |_|
#
# --------------------------------------------------------------/
GROOVY_HOME='/opt/groovy/current'
FZF_HOME="${iRCHOME}"/utils/fzf
ANSIBLE_COMPLETION_PATH="${iRCHOME}/.completion/ansible-completion"            # https://github.com/dysosmus/ansible-completion
RT_COMPLETION="$HOME/.jfrog/jfrog_bash_completion"
NPM_COMPLETION="$HOME/.npm/lib/node_modules/npm-completion"                    # for npm-completion https://github.com/Jephuff/npm-bash-completion

if [[ '1' = "$(isOSX)" ]]; then
  GROOVY_HOME="$(brew --prefix groovy)"
  FZF_HOME="$(brew --prefix fzf)"
  test -f "${iRCHOME}"/.imac && source "${iRCHOME}"/.imac
elif [[ '1' = "$(isLinux)" ]]; then                                            ## for Ubuntu/RHEL/CentOS
  # distrab=$(awk -F= '$1=="ID" {print $2;}' /etc/os-release)
  # [[ 'ubuntu' == "${distrab}" ]] || [[ 'centos' == "${distrab}" ]] || [[ 'rhel' == "${distrab}" ]] && file="$HOME/.bashrc"
  [[ '1' == "$(isDebian)" ]]  && GIT_COMPLETION_DIR='/opt/git/contrib/completion'
  [[ '1' == "$(isDebian)" ]]  && export DEBIAN_FRONTEND=noninteractive
  [[ '1' == "$(isFedora)" ]]  && GIT_COMPLETION_DIR='/usr/share/doc/git/contrib/completion'
  if ls "${GIT_COMPLETION_DIR}"/*git* >/dev/null 2>&1; then source "${GIT_COMPLETION_DIR}"/*git*.[bs]*h; fi
  test -f "${iRCHOME}"/.irhel && source <( /bin/cat "${iRCHOME}"/.irhel )
fi

test -f "${iRCHOME}"/.env                           && source "${iRCHOME}"/.env
test -f "${iRCHOME}"/.token                         && source "${iRCHOME}"/.token
test -f "$HOME/.cargo/env"                          && source "$HOME/.cargo/env"
test -s "$HOME/.sdkman/bin/sdkman-init.sh"          && source "$HOME/.sdkman/bin/sdkman-init.sh"
test -f "$HOME"/.rbenv/bin/rbenv                    && eval "$("$HOME"/.rbenv/bin/rbenv init - bash)"
test -f "${iRCHOME}"/.alias                         && source "${iRCHOME}"/.alias

test -f "$HOME"/.docker/init-bash.sh                && source "$HOME"/.docker/init-bash.sh       # docker desktop
test -f "${RT_COMPLETION}"                          && source "${RT_COMPLETION}"
test -d "${GROOVY_HOME}/bin"                        && eval "$(/bin/cat "${GROOVY_HOME}"/bin/*_completion)"
test -d "${ANSIBLE_COMPLETION_PATH}"                && eval "$(/bin/cat "${ANSIBLE_COMPLETION_PATH}"/*.bash)"
test -f "${iRCHOME}/.completion/cht.sh/cht.sh"      && eval "$(/bin/cat "${iRCHOME}/.completion/cht.sh/cht.sh")"
test -f "${iRCHOME}/.completion/complete_alias"     && eval "$(/bin/cat "${iRCHOME}/.completion/complete_alias")"
test -f "${iRCHOME}/.completion/npm-groovy-lint.sh" && eval "$(/bin/cat "${iRCHOME}/.completion/npm-groovy-lint.sh")"
type -P commitlint >/dev/null 2>&1                  && eval "$(/bin/cat "${iRCHOME}/.completion/commitlint.sh")"
type -P kubectl    >/dev/null                       && eval "$(command kubectl completion bash)"
type -P npm        >/dev/null                       && eval "$(npm completion)"                  # ~/.npm/lib/node_modules/npm-completion/npm-completion.sh
type -P gh         >/dev/null                       && eval "$(gh copilot alias -- bash)"
type -P bat        >/dev/null                       && eval "$(bat --completion bash)"
# test -d "${NPM_COMPLETION}"                       && source "${NPM_COMPLETION}/npm-completion.sh"
# via `vault -autocomplete-install`
type -P vault      >/dev/null                       && complete -C "$(type -P valut)" vault
type -P pipx       >/dev/null                       && eval "$(register-python-argcomplete pipx)"
type -P pip        >/dev/null                       && eval "$(pip completion --bash)"
type -t _fd        >/dev/null 2>&1                  && complete -F _fd -o nosort -o bashdefault -o default ff ffs
type -t _comp_cmd_chromium_browser >/dev/null 2>&1  && complete -F _comp_cmd_chromium_browser -o nosort -o bashdefault -o default chrome
complete -o default -o bashdefault chrome

# fzf
if test -f "$HOME"/.fzf.bash; then
  source "$HOME"/.fzf.bash
else
  type -P fzf >/dev/null                            && eval "$(command fzf --bash)"
  test -f "${FZF_HOME}/shell/key-bindings.bash"     && source "${FZF_HOME}/shell/key-bindings.bash"
fi
type -t _fzf_opts_completion >/dev/null 2>&1        && complete -F _fzf_opts_completion -o bashdefault -o default vim vimdiff penv imgview fman

# /--------------------------------------------------------------
#                   __ _
#                  / _(_)
#   ___ ___  _ __ | |_ _  __ _
#  / __/ _ \| '_ \|  _| |/ _` |
# | (_| (_) | | | | | | | (_| |
#  \___\___/|_| |_|_| |_|\__, |
#                         __/ |
#                        |___/
#
# --------------------------------------------------------------/
shopt -s cdspell
shopt -s cmdhist
shopt -s histappend
# shopt -s extdebug

### disable ctrl+s lock putty : # stty -echo; stty stop undef; stty start undef
# - [reference](https://stackoverflow.com/a/25391867/2940319)
#   - tput : No value for $TERM and no -T specified
#   - stty : 'standard input': Inappropriate ioctl for device
if [[ $- == *i* ]]; then
  stty ixany
  stty ixoff -ixon
  test -f ~/.LESS_TERMCAP && source ~/.LESS_TERMCAP
fi

# /--------------------------------------------------------------
#  _                                     _
# | |                                   | |
# | |_ ___ _ __ _ __ ___ ______ ___ ___ | | ___  _ __
# | __/ _ \ '__| '_ ` _ \______/ __/ _ \| |/ _ \| '__|
# | ||  __/ |  | | | | | |    | (_| (_) | | (_) | |
#  \__\___|_|  |_| |_| |_|     \___\___/|_|\___/|_|
#
#
# --------------------------------------------------------------/
export TERM='xterm-color'
# screen: /usr/share/terminfo/73/screen.xterm-256color
# centos/rhel
test -e /usr/share/terminfo/x/xterm-256color  && export TERM='xterm-256color'
# ubuntu
test -e /lib/terminfo/x/xterm-256color        && export TERM='xterm-256color'
# cygwin/osx
test -e /usr/share/terminfo/78/xterm-256color && export TERM='xterm-256color'

# /--------------------------------------------------------------
#                   __
#                  / _|
#  _ __ ___  _   _| |_ _   _ _ __   ___
# | '_ ` _ \| | | |  _| | | | '_ \ / __|
# | | | | | | |_| | | | |_| | | | | (__
# |_| |_| |_|\__, |_|  \__,_|_| |_|\___|
#             __/ |
#            |___/
# --------------------------------------------------------------/
# rewrite help and history
[[ -f "${iRCHOME}/bin/help"    ]] && source "${iRCHOME}/bin/help"
[[ -f "${iRCHOME}/bin/history" ]] && source "${iRCHOME}/bin/history"

source <( /bin/cat "${iRCHOME}"/bin/{ifunc,ffunc,ig,irt,im,icolor}.sh )
[[ '1' = "$(isOSX)"    ]] && source <( /bin/cat "${iRCHOME}"/bin/ii.sh )
[[ '1' != "$(isLinux)" ]] && test -f "${iRCHOME}"/bin/screenfetch-dev && bash "${iRCHOME}"/bin/screenfetch-dev
test -f "${iRCHOME}"/bin/now       && bash   "${iRCHOME}"/bin/now
test -f "${iRCHOME}"/.tmux-session && source "${iRCHOME}"/.tmux-session
[[ '1' = "$(isOSX)"    ]] && echo ''

# type -P starship >/dev/null 2>&1 && eval "$(starship init bash)"

# /--------------------------------------------------------------
#   __      __         _             _
#  / _|    / _|       | |           (_)
# | |_ ___| |_   _ __ | |_   _  __ _ _ _ __  ___
# |  _|_  /  _| | '_ \| | | | |/ _` | | '_ \/ __|
# | |  / /| |   | |_) | | |_| | (_| | | | | \__ \
# |_| /___|_|   | .__/|_|\__,_|\__, |_|_| |_|___/
#               | |             __/ |
#               |_|            |___/
# --------------------------------------------------------------/
! test -f "${iRCHOME}"/bin/fzf-git.sh || source "${iRCHOME}"/bin/fzf-git.sh

# vim:tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=sh:foldmethod=marker:foldmarker=#\ --------------------------------------------------------------/,#\ /--------------------------------------------------------------
