#!/usr/bin/env bash
# shellcheck disable=SC2034,SC1090,SC1091,SC2182,SC2181,SC1094
# =============================================================================
#   FileName : .marslorc
#     Author : marslo.jiao@gmail.com
#    Created : 2012
# LastChange : 2024-06-08 00:26:28
# =============================================================================

export iRCHOME="$HOME/.marslo"
# credit: https://github.com/ppo/bash-colors/blob/master/bash-colors.sh (v0.3.0)
source "${iRCHOME}/bin/bash-color.sh"

function isWSL()    { if uname -r | command grep --color=never -q -i 'microsoft'; then echo 1; fi; }
function isOSX()    { [[ 'Darwin' = $(uname) ]] && echo 1; }
function isLinux()  { [[ '1' != "$(isWSL)" ]] && [[ 'Linux' = $(uname) ]] && echo 1; }
function isDebian() { [[ 'debian' = $(awk -F '=' '/ID_LIKE/ { print $2 }' /etc/os-release) ]] && echo 1; }
function isFedora() { [[ $(awk -F '=' '/ID/ { print $2 }' /etc/os-release) =~ 'fedora'     ]] && echo 1; }
function isRHEL()   { [[ 'rhel'   = $(awk -F '=' '/ID/ { print $2 }' /etc/os-release)      ]] && echo 1; }
function isUbuntu() { [[ 'ubuntu' = $(awk -F '=' '/ID/ { print $2 }' /etc/os-release)      ]] && echo 1; }
function isCentOS() { [[ 'centos' = $(awk -F '=' '/ID/ { print $2 }' /etc/os-release)      ]] && echo 1; }
# for public server (use common account)
function bello()    { source ~/.marslo/.marslorc; set -o vi;  }
function bye()      { source "${iRCHOME}"/.bye; set -o emacs; }


# /--------------------------------------------------------------
#      _       __            _ _     _              _
#     | |     / _|          | | |   | |            | |
#   __| | ___| |_ __ _ _   _| | |_  | |_ ___   ___ | |___
#  / _` |/ _ \  _/ _` | | | | | __| | __/ _ \ / _ \| / __|
# | (_| |  __/ || (_| | |_| | | |_  | || (_) | (_) | \__ \
#  \__,_|\___|_| \__,_|\__,_|_|\__|  \__\___/ \___/|_|___/
#
# --------------------------------------------------------------/
if test -f '/usr/local/opt/coreutils/libexec/gnubin/ls'; then
  LS='/usr/local/opt/coreutils/libexec/gnubin/ls'
elif test -f '/usr/bin/ls'; then
  LS='/usr/bin/ls'
elif test -f '/bin/ls'; then
  LS='/bin/ls'
else
  LS="$(type -P ls)"
fi

if test -f '/usr/local/opt/grep/libexec/gnubin/grep'; then
  GREP='/usr/local/opt/grep/libexec/gnubin/grep'
elif test -f '/usr/bin/grep'; then
  GREP='/usr/bin/grep'
elif test -f '/bin/grep'; then
  GREP='/bin/grep'
else
  GREP="$(type -P grep)"
fi

if [[ '1' = "$(isWSL)" ]]; then
  COPY='/mnt/c/Windows/System32/clip.exe'
elif [[ 'Darwin' = "$(uname)" ]]; then
  COPY="$(type -P pbcopy)"
else
  COPY=''
fi

if [[ '1' = $(isOSX) ]]; then
  if [[ -x '/usr/local/opt/util-linux/bin/column' ]]; then
    COLUMN='/usr/local/opt/util-linux/bin/column'
  elif [[ -x '/usr/bin/column' ]]; then
    COLUMN='/usr/bin/column'
  fi
else
  COLUMN=$(type -P column)
fi

# /--------------------------------------------------------------
#                            _      _   _
#                           | |    | | (_)
#   ___ ___  _ __ ___  _ __ | | ___| |_ _  ___  _ __
#  / __/ _ \| '_ ` _ \| '_ \| |/ _ \ __| |/ _ \| '_ \
# | (_| (_) | | | | | | |_) | |  __/ |_| | (_) | | | |
#  \___\___/|_| |_| |_| .__/|_|\___|\__|_|\___/|_| |_|
#                     | |
#                     |_|
#
# --------------------------------------------------------------/
GROOVY_HOME='/opt/groovy/current'
FZF_HOME="${iRCHOME}"/utils/fzf
ANSIBLE_COMPLETION_PATH="${iRCHOME}/.completion/ansible-completion"            # https://github.com/dysosmus/ansible-completion
RT_COMPLETION="$HOME/.jfrog/jfrog_bash_completion"

if [[ '1' = "$(isOSX)" ]]; then
  GROOVY_HOME="$(brew --prefix groovy)"
  FZF_HOME="$(brew --prefix fzf)"
  test -f "${iRCHOME}"/.imac && source "${iRCHOME}"/.imac
elif [[ '1' = "$(isLinux)" ]]; then                                            ## for Ubuntu/RHEL/CentOS
  # distrab=$(awk -F= '$1=="ID" {print $2;}' /etc/os-release)
  # [[ 'ubuntu' == "${distrab}" ]] || [[ 'centos' == "${distrab}" ]] || [[ 'rhel' == "${distrab}" ]] && file="$HOME/.bashrc"
  [[ '1' == "$(isDebian)" ]]  && GIT_COMPLETION_DIR='/opt/git/contrib/completion'
  [[ '1' == "$(isFedora)" ]]  && GIT_COMPLETION_DIR='/usr/share/doc/git/contrib/completion'
  if ls "${GIT_COMPLETION_DIR}"/*git* >/dev/null 2>&1; then source "${GIT_COMPLETION_DIR}"/*git*.[bs]*h; fi
  test -f "${iRCHOME}"/.irhel && source <( cat "${iRCHOME}"/.irhel )
fi

test -f "${iRCHOME}"/.env                            && source "${iRCHOME}"/.env
test -f "${iRCHOME}"/.token                          && source "${iRCHOME}"/.token
test -f "$HOME/.cargo/env"                           && source "$HOME/.cargo/env"
test -s "$HOME/.sdkman/bin/sdkman-init.sh"           && source "$HOME/.sdkman/bin/sdkman-init.sh"
test -f "$HOME"/.rbenv/bin/rbenv                     && eval "$("$HOME"/.rbenv/bin/rbenv init - bash)"

test -d "${GROOVY_HOME}/bin"                         && source <( cat "${GROOVY_HOME}"/bin/*_completion )
test -f "$HOME"/.docker/init-bash.sh                 && source "$HOME"/.docker/init-bash.sh       # docker desktop
test -d "${ANSIBLE_COMPLETION_PATH}"                 && eval "$(cat "${ANSIBLE_COMPLETION_PATH}"/*.bash)"
test -f "${iRCHOME}/.completion/cht.sh"              && source <( cat "${iRCHOME}/.completion/cht.sh" )
test -f "${iRCHOME}/.completion/complete_alias"      && source <( cat "${iRCHOME}/.completion/complete_alias" )
test -f "${RT_COMPLETION}"                           && source "${RT_COMPLETION}"
command -v kubectl >/dev/null                        && source <( command kubectl completion bash )
command -v npm     >/dev/null                        && source <( npm completion )
# via `vault -autocomplete-install`
command -v vault   >/dev/null                        && complete -C /usr/local/bin/vault vault
command -v pipx    >/dev/null                        && eval "$(register-python-argcomplete pipx)"
command -v pip     >/dev/null                        && eval "$(pip completion --bash)"
type -t _fd        >/dev/null 2>&1                   && complete -F _fd -o nosort -o bashdefault -o default ff ffs
type -t _comp_cmd_chromium_browser 2>&1              && complete -F _comp_cmd_chromium_browser -o nosort -o bashdefault -o default chrome
complete -o default -o bashdefault chrome

# fzf
if test -f "$HOME"/.fzf.bash; then
  source "$HOME"/.fzf.bash
else
  command -v fzf >/dev/null                          && eval "$(fzf --bash)"
  test -f "${FZF_HOME}/shell/key-bindings.bash"      && source "${FZF_HOME}/shell/key-bindings.bash"
fi
type -t _fzf_opts_completion >/dev/null 2>&1         && complete -F _fzf_opts_completion -o bashdefault -o default vim vimdiff penv imgview fman

# /--------------------------------------------------------------
#                   __ _
#                  / _(_)
#   ___ ___  _ __ | |_ _  __ _
#  / __/ _ \| '_ \|  _| |/ _` |
# | (_| (_) | | | | | | | (_| |
#  \___\___/|_| |_|_| |_|\__, |
#                         __/ |
#                        |___/
#
# --------------------------------------------------------------/
shopt -s cdspell
shopt -s cmdhist
shopt -s histappend
# shopt -s extdebug

### disable ctrl+s lock putty : # stty -echo; stty stop undef; stty start undef
# - [here](https://stackoverflow.com/a/25391867/2940319)
#   - tput : No value for $TERM and no -T specified
#   - stty : 'standard input': Inappropriate ioctl for device
if [[ $- == *i*  ]]; then
  stty ixany
  stty ixoff -ixon
  test -f ~/.LESS_TERMCAP && source ~/.LESS_TERMCAP
fi

# /--------------------------------------------------------------
#  _                                     _
# | |                                   | |
# | |_ ___ _ __ _ __ ___ ______ ___ ___ | | ___  _ __
# | __/ _ \ '__| '_ ` _ \______/ __/ _ \| |/ _ \| '__|
# | ||  __/ |  | | | | | |    | (_| (_) | | (_) | |
#  \__\___|_|  |_| |_| |_|     \___\___/|_|\___/|_|
#
#
# --------------------------------------------------------------/
export TERM='xterm-color'
# centos/rhel
test -e /usr/share/terminfo/x/xterm-256color  && export TERM='xterm-256color'
# ubuntu
test -e /lib/terminfo/x/xterm-256color        && export TERM='xterm-256color'
# cygwin/osx
test -e /usr/share/terminfo/78/xterm-256color && export TERM='xterm-256color'

# /--------------------------------------------------------------
#                   __
#                  / _|
#  _ __ ___  _   _| |_ _   _ _ __   ___
# | '_ ` _ \| | | |  _| | | | '_ \ / __|
# | | | | | | |_| | | | |_| | | | | (__
# |_| |_| |_|\__, |_|  \__,_|_| |_|\___|
#             __/ |
#            |___/
# --------------------------------------------------------------/
source <( cat "${iRCHOME}"/bin/{ifunc,ffunc,ig,irt,im,icolor}.sh )
[[ '1' = "$(isOSX)"    ]] && source <( cat "${iRCHOME}"/bin/ii.sh )
[[ '1' != "$(isLinux)" ]] && test -f "${iRCHOME}"/bin/screenfetch-dev && bash "${iRCHOME}"/bin/screenfetch-dev
[[ '1' = "$(isLinux)"  ]] && echo ''
test -f "${iRCHOME}"/bin/now       && bash   "${iRCHOME}"/bin/now
[[ '1' = "$(isOSX)"    ]] && echo ''
test -f "${iRCHOME}"/.tmux-session && source "${iRCHOME}"/.tmux-session
# to fix the issue of _comp_compgen_known_hosts__impl: -F: an empty filename is specified
# [[ '1' = "$(isOSX)"  ]] && complete -r ssh
[[ '1' = "$(isOSX)"    ]] && complete -F _ssh -o bashdefault -o default ssh

# /--------------------------------------------------------------
#   __      __         _             _
#  / _|    / _|       | |           (_)
# | |_ ___| |_   _ __ | |_   _  __ _ _ _ __  ___
# |  _|_  /  _| | '_ \| | | | |/ _` | | '_ \/ __|
# | |  / /| |   | |_) | | |_| | (_| | | | | \__ \
# |_| /___|_|   | .__/|_|\__,_|\__, |_|_| |_|___/
#               | |             __/ |
#               |_|            |___/
# --------------------------------------------------------------/
test -f "${iRCHOME}"/bin/fzf-git.sh && source "${iRCHOME}"/bin/fzf-git.sh

# vim:tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=sh:foldmethod=marker:foldmarker=#\ --------------------------------------------------------------/,#\ /--------------------------------------------------------------
