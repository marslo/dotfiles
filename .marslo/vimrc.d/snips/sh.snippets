# A valid snippet should starts with:
#
#   snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#   endsnippet
#
# Snippet options:
#
#   b - Beginning of line.
#   i - In-word expansion.
#   w - Word boundary.
#   r - Regular expression
#   e - Custom context snippet
#   A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#   snippet emitter "emitter properties" b
#   private readonly ${1} = new Emitter<$2>()
#   public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#   endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet #!! "shebang" b
#!/usr/bin/env ${1:bash}

set -euo pipefail
${2}

# vim:tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=${1/^ba(.*)/$1/}:
endsnippet

snippet shebang "shebang" b
#!/usr/bin/env ${1:bash}

set -euo pipefail
${3}

${2:#} vim:tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=${1/^ba(.*)/$1/}:
endsnippet

snippet "^s(hell)?c(heck)?( (\S+))?" "shellcheck source=/dev/null disable={}" br
# shellcheck source=/dev/null disable=SC${1:`!p
snip.rv = match.group(4) if match.group(3) is not None else "2015"`}
endsnippet

snippet "#sc( (\S+))?" "shellcheck disable={}" r
# shellcheck disable=SC${1:`!p
snip.rv = match.group(2) if match.group(1) is not None else "2015"`}
endsnippet

snippet #scc "shellcheck dropdown" r
# shellcheck ${1|disable=SC,source=/dev/null|}
endsnippet

snippet modeline "vim modeline" b
# vim:tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=sh:
endsnippet

snippet '^//vim' "vim modeline" rbA
# vim:tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=sh:
endsnippet

snippet case "case .. esac"
case ${1:word} in
  ${2:pattern} ) $0;;
esac
endsnippet

snippet printf
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

# vim:tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=snippet:
