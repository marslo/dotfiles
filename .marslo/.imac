#!/usr/bin/env bash
# shellcheck disable=SC2155,SC2034,SC1091,SC1090,SC2046,SC2086,SC2154
# =============================================================================
#   FileName: .imac
#     Author: marslo.jiao@gmail.com
#    Created: 2019-05-20 12:13:15
# LastChange: 2025-04-15 10:28:53
#   Comments: using `brew --prefix` for $HOMEBEW_PREFIX set as `/opt/homebrew`
# =============================================================================
# export SHELLCHECK_OPTS="-e SC2181 -e SC2230 -e SC2086 -e SC2164"

# should've been set in .bashrc or .bash_profile via `brew shellenv`
[[ -z "${HOMEBREW_PREFIX}" ]] && export HOMEBREW_PREFIX="$(brew --prefix)"
if [[ 'Darwin' = "$(/usr/bin/uname -s)" ]]; then
  # https://cloud.tencent.com/developer/article/1614039
  # export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles

  HOMEBREW_OPT="${HOMEBREW_PREFIX}/opt"
  # if cannot be found in /etc/paths
  ! grep -q "${HOMEBREW_PREFIX}/bin" /etc/paths && HOMEBREW_BINS="${HOMEBREW_PREFIX}/bin:"
  HOMEBREW_BINS+="${HOMEBREW_PREFIX}/sbin"

  INFOZIP_HOME="${HOMEBREW_OPT}/zip"
  INFOUNZIP_HOME="${HOMEBREW_OPT}/unzip"
  OPENLDAP_HOME="${HOMEBREW_OPT}/openldap"
  CURL_OPENSSL_HOME="${HOMEBREW_OPT}/curl"                        # via: brew install curl-openssl (https://stackoverflow.com/a/49798271/2940319)
  OPENSSL_HOME="${HOMEBREW_OPT}/openssl"                          # OPENSSL_HOME="$(brew --prefix openssl)"
  LIBRESSL_HOME="${HOMEBREW_OPT}/libressl"
  GIT_EXTRAS="${HOMEBREW_OPT}/git-extras"                         # GIT_EXTRAS="$(brew --prefix git-extras)"
  ICU4C_711="${HOMEBREW_PREFIX}/Cellar/icu4c@71.1/71.1"           # '${HOMEBREW_OPT}/icu4c@71.1'
  EXPAT_HOME="${HOMEBREW_OPT}/expat"
  ZLIB_HOME="${HOMEBREW_OPT}/zlib"
  LIBICONV_HOME="${HOMEBREW_OPT}/libiconv"
  NCURSES_HOME="${HOMEBREW_OPT}/ncurses"

  # https://stackoverflow.com/q/77849563/2940319
  BINUTILS="${HOMEBREW_OPT}/binutils"
  GNUBINHOME="${HOMEBREW_OPT}/coreutils/libexec/gnubin"
  GNUMANHOME="${HOMEBREW_OPT}/coreutils/libexec/gnuman"
  GNUWHICH="${HOMEBREW_OPT}/gnu-which/libexec/gnubin"
  GNUGREP="${HOMEBREW_OPT}/grep/libexec/gnubin"
  GNUGETOPT="${HOMEBREW_OPT}/gnu-getopt/bin"
  GNUTAR="${HOMEBREW_OPT}/gnu-tar/libexec/gnubin"
  GNUFIND="${HOMEBREW_OPT}/findutils/libexec/gnubin"
  GNUINDENT="${HOMEBREW_OPT}/gnu-indent/libexec/gnubin"
  GNUSED="${HOMEBREW_OPT}/gnu-sed/libexec/gnubin"
  GNUMAKE="${HOMEBREW_OPT}/make/libexec/gnubin"
  INETUTILS="${HOMEBREW_OPT}/inetutils/libexec/gnubin"
  GNULIBTOOL="${HOMEBREW_OPT}/libtool/libexec/gnubin"
  GUILE_TLS_CERTIFICATE_DIRECTORY="${HOMEBREW_PREFIX}/etc/gnutls/"
  UTIL_LINUX_HOME="${HOMEBREW_OPT}/util-linux"

  MACVIM_HOME='/Applications/MacVim.app'
  # /usr/local/Caskroom/neovim-nightly/nightly-7aa5637/nvim-macos-x86_64/bin/nvim
  # NVIM_HOME='/usr/local/neovim'
  # vim-tabnine
  LLVM_HOME="$(brew --prefix llvm)"
  TRASH_HOME="$(brew --prefix trash)"

  TOOLS_PATH="${TOOLS_PATH:-}"
  test -d '/usr/local/vim'     && TOOLS_PATH+=':/usr/local/vim/bin'
  test -d "$HOME/.docker"      && TOOLS_PATH+=":$HOME/.docker/bin"
  # test -d "${NVIM_HOME}"     && TOOLS_PATH+=":${NVIM_HOME}/bin"
  test -d "${MACVIM_HOME}"     && TOOLS_PATH+=":${MACVIM_HOME}/Contents/bin"
  test -d "${LLVM_HOME}"       && TOOLS_PATH+=":${LLVM_HOME}/bin"
  test -d "${UTIL_LINUX_HOME}" && TOOLS_PATH+=":${UTIL_LINUX_HOME}/bin"
  test -d "${TRASH_HOME}"      && TOOLS_PATH+=":${TRASH_HOME}/bin"

  GNU_PATH="${GNU_PATH:-}"
  test -d "${GNUBINHOME}" && GNU_PATH+=":${GNUBINHOME}"
  test -d "${GNUWHICH}"   && GNU_PATH+=":${GNUWHICH}"
  test -d "${GNUGETOPT}"  && GNU_PATH+=":${GNUGETOPT}"
  test -d "${GNUGREP}"    && GNU_PATH+=":${GNUGREP}"
  test -d "${GNUTAR}"     && GNU_PATH+=":${GNUTAR}"
  test -d "${GNUFIND}"    && GNU_PATH+=":${GNUFIND}"
  test -d "${GNUINDENT}"  && GNU_PATH+=":${GNUINDENT}"
  test -d "${GNUSED}"     && GNU_PATH+=":${GNUSED}"
  test -d "${BINUTILS}"   && GNU_PATH+=":${BINUTILS}/bin"
  test -d "${GNULIBTOOL}" && GNU_PATH+=":${GNULIBTOOL}"

  # java 8
  #   JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.8.0_271.jdk/Contents/Home'
  # java 11                                                       # https://docs.oracle.com/en/java/javase/11/install/installation-jdk-macos.html
  #   JAVA_HOME=$(/usr/libexec/java_home -v 11)
  # java 17
  #   JAVA_HOME=$(brew --prefix openjdk@17)                       # -> "${HOMEBREW_OPT}/openjdk@17"
  # java 21
  #   JAVA_HOME="$(brew --prefix java)"
  # java 23
  JAVA_HOME=$(/usr/libexec/java_home)                             # -> $ sudo ln -sfn $(brew --prefix openjdk)/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
  GROOVY_HOME="$(brew --prefix groovy)/libexec"                   # -> "${HOMEBREW_OPT}/groovy/libexec"
  GROOVY_CLASSPATH="${GROOVY_CLASSPATH:+$GROOVY_CLASSPATH:}"
  [[ -d "${GROOVY_HOME}/lib"              ]] && GROOVY_CLASSPATH+=".:$(echo "${GROOVY_HOME}"/lib/*.jar | tr ' ' ':'):"
  [[ -d '/opt/jenkins/latest/WEB-INF/lib' ]] && GROOVY_CLASSPATH+="$(echo /opt/jenkins/latest/WEB-INF/lib/*.jar | tr ' ' ':'):"
  [[ -d '/opt/jenkins/plugins'            ]] && GROOVY_CLASSPATH+="$(echo /opt/jenkins/plugins/*/WEB-INF/lib/*.jar | tr ' ' ':')"
  test -f "$(brew --prefix coreutils)/libexec/gnubin/paste" &&
       GROOVY_CLASSPATH=$( echo "${GROOVY_CLASSPATH}" | tr ':' '\n' | awk 'NF' | awk '!x[$0]++' | "$(brew --prefix coreutils)/libexec/gnubin/paste" -s -d: )
  CLASSPATH=".:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar"
  CLASSPATH+=":$GROOVY_CLASSPATH"
  test -f "$(brew --prefix coreutils)/libexec/gnubin/paste" &&
       CLASSPATH=$( echo "${CLASSPATH}" | tr ':' '\n' | awk 'NF' | awk '!x[$0]++' | "$(brew --prefix coreutils)/libexec/gnubin/paste" -s -d: )
  CPPFLAGS="-I$(brew --prefix openjdk)/include"                   # https://stackoverflow.com/a/69504284/2940319
  # JAVA_OPTS+='-Dhttp.proxyHost=ipamunix.sample.com -Dhttp.proxyPort=8080'

  # NODE_HOME="${HOMEBREW_OPT}/node@12"
  NODE_HOME="$(brew --prefix node)"
  MYSQL_HOME='/usr/local/mysql'
  ITERM2_ADDITIONAL="${HOME}/.iterm2"

  TCLTK_HOME="${HOMEBREW_OPT}/tcl-tk"                              # -> "$(brew --prefix tcl-tk)"
  SQLITE_HOME="${HOMEBREW_OPT}/sqlite"
  RUBY_HOME=$(brew --prefix ruby)
  RUBY_CONFIGURE_OPTS="--with-openssl-dir=${OPENSSL_HOME}"
  RUBY_GEM_HOME="${HOMEBREW_PREFIX}"/lib/ruby/gems/3.4.0+0
  ED_HOME="${HOMEBREW_OPT}/ed"

  PYTHON_VERSION='3.13'
  PYTHON_HOME=$(brew --prefix python@${PYTHON_VERSION})
  PYTHONPATH="${HOMEBREW_PREFIX}/lib/python${PYTHON_VERSION}/site-packages"
  PYTHONUSERBASE="$(${PYTHON_HOME}/libexec/bin/python -c 'import site; print(site.USER_BASE)')"   # PYTHONUSERBASE=$PYTHONPATH
  PYTHON_CONFIGURE_OPTS="--with-tcltk-includes='-I${TCLTK_HOME}/include' --with-tcltk-libs='-L${TCLTK_HOME}/lib -ltcl8.6 -ltk8.6'"

  SCRIPT_BINS="${SCRIPT_BINS:-}"
  test -d "${PYTHON_HOME}"    && SCRIPT_BINS+=":${PYTHON_HOME}/libexec/bin"
  test -d "${RUBY_HOME}"      && SCRIPT_BINS+=":${RUBY_HOME}/bin"
  test -d "${RUBY_GEM_HOME}"  && SCRIPT_BINS+=":${RUBY_GEM_HOME}/bin"
  test -d "${TCLTK_HOME}"     && SCRIPT_BINS+=":${TCLTK_HOME}/bin"
  test -d "${PYTHONUSERBASE}" && SCRIPT_BINS+=":${PYTHONUSERBASE}/bin"
  test -d "${NODE_HOME}"      && SCRIPT_BINS+=":${NODE_HOME}/bin"
  test -d "${JAVA_HOME}"      && SCRIPT_BINS+=":${JAVA_HOME}/bin"
  test -d "${GROOVY_HOME}"    && SCRIPT_BINS+=":${GROOVY_HOME}/bin"
  test -d "${ED_HOME}"        && SCRIPT_BINS+=":${ED_HOME}/libexec/gnubin"
  test -d "${ED_HOME}"        && SCRIPT_BINS+=":${ED_HOME}/bin"
  test -d "${RUBYGEM}"        && SCRIPT_BINS+=":${RUBYGEM}"
  test -d "${GIT_EXTRAS}"     && SCRIPT_BINS+=":${GIT_EXTRAS}/bin"
  # SCRIPT_BINS+=":${PYENV_ROOT}/bin"                             # shell: bash 3.2.57

  UTLS_PATH="${UTLS_PATH:-}"
  test -d "${HOMEBREW_OPT}/gettext"      && UTLS_PATH+=":${HOMEBREW_OPT}/gettext/bin"
  test -d "${HOMEBREW_OPT}/file-formula" && UTLS_PATH+=":${HOMEBREW_OPT}/file-formula/bin"
  test -d "${INFOZIP_HOME}"              && UTLS_PATH+=":${INFOZIP_HOME}/bin"
  test -d "${INFOUNZIP_HOME}"            && UTLS_PATH+=":${INFOUNZIP_HOME}/bin"
  test -d "${OPENLDAP_HOME}"             && UTLS_PATH+=":${OPENLDAP_HOME}/bin"
  test -d "${OPENLDAP_HOME}"             && UTLS_PATH+=":${OPENLDAP_HOME}/sbin"
  test -d "${CURL_OPENSSL_HOME}"         && UTLS_PATH+=":${CURL_OPENSSL_HOME}/bin"
  test -d "${EXPAT_HOME}"                && UTLS_PATH+=":${EXPAT_HOME}/bin"
  test -d "${OPENSSL_HOME}"              && UTLS_PATH+=":${OPENSSL_HOME}/bin"
  test -d "${LIBICONV_HOME}"             && UTLS_PATH+=":${LIBICONV_HOME}/bin"
  test -d "${INETUTILS}"                 && UTLS_PATH+=":${INETUTILS}"

  SPECIAL_TOOLS="${SPECIAL_TOOLS:-}"
  test -d "${ICU4C_711}" && SPECIAL_TOOLS+=":${ICU4C_711}/bin"
  test -d "${ICU4C_711}" && SPECIAL_TOOLS+=":${ICU4C_711}/sbin"

  TEMP_PATH="${TOOLS_PATH}"
  TEMP_PATH+=":${HOMEBREW_BINS}"
  TEMP_PATH+=":${GNU_PATH}"
  TEMP_PATH+=":${SCRIPT_BINS}"
  TEMP_PATH+=":${UTLS_PATH}"
  test -d "${SQLITE_HOME}"       && TEMP_PATH+=":${SQLITE_HOME}/bin"
  test -d "${ITERM2_ADDITIONAL}" && TEMP_PATH+=":${ITERM2_ADDITIONAL}"

  PATH="$SPECIAL_TOOLS:$TEMP_PATH:$PATH"

  # eval "$(/usr/libexec/path_helper)"
  export JAVA_HOME GROOVY_HOME PATH
  export GUILE_TLS_CERTIFICATE_DIRECTORY PYTHONPATH PYTHONUSERBASE CLASSPATH RUBY_CONFIGURE_OPTS
  # export JAVA_OPTS

  # more options:
  # - `/etc/ssl/cert.pem`
  # - "$(brew --prefix ca-certificates)/share/ca-certificates/cacert.pem"
  # - "$(openssl version -d | awk -F'"' '{print $2}')/cert.pem"
  # - `security find-certificate -a -p /System/Library/Keychains/SystemRootCertificates.keychain | sudo tee /etc/ssl/certs/ca-certificates.crt`
  export SSL_CERT_FILE="$(openssl version -d | awk -F'"' '{print $2}')/cert.pem"
  export CURL_CA_BUNDLE="${SSL_CERT_FILE}"

  # export HOMEBREW_INSTALL_BADGE='‚òïÔ∏è üê∏'
  export HOMEBREW_INSTALL_BADGE='ü¶ç'
  # for completion issue : https://github.com/orgs/Homebrew/discussions/4227#discussioncomment-5007112
  [[ -z "${HOMEBREW_REPOSITORY}" ]] && export HOMEBREW_REPOSITORY=/usr/local/Homebrew
fi

# /--------------------------------------------------------------
#                            _      _   _
#                           | |    | | (_)
#   ___ ___  _ __ ___  _ __ | | ___| |_ _  ___  _ __
#  / __/ _ \| '_ ` _ \| '_ \| |/ _ \ __| |/ _ \| '_ \
# | (_| (_) | | | | | | |_) | |  __/ |_| | (_) | | | |
#  \___\___/|_| |_| |_| .__/|_|\___|\__|_|\___/|_| |_|
#                     | |
#                     |_|
#
# --------------------------------------------------------------/

## bash-compltion
BASH_COMPLETION_DIR="${HOMEBREW_PREFIX}/etc/bash_completion.d"               # BASH_COMPLETION="${HOMEBREW_PREFIX}/opt/bash-completion/etc/bash_completion"
## bash-completion@2
BASH_COMPLETION_2="$(brew --prefix bash-completion@2)/etc/profile.d/bash_completion.sh"
test -f "${BASH_COMPLETION_2}" && source "${BASH_COMPLETION_2}"

if test -d "${BASH_COMPLETION_DIR}"; then
  source <( cat "${BASH_COMPLETION_DIR}"/{brew,tmux,tig-completion.bash} )
  if ls "${BASH_COMPLETION_DIR}"/*git*    >/dev/null 2>&1; then source <( cat "${BASH_COMPLETION_DIR}"/*git* )    ; fi
  if ls "${BASH_COMPLETION_DIR}"/*docker* >/dev/null 2>&1; then source <( cat "${BASH_COMPLETION_DIR}"/*docker* ) ; fi
fi

# iTerm2
ITERM2_INTEGRATION="$HOME"/.iterm2_shell_integration.bash
[[ '1' = "$(isOSX)" ]] && test -e "${ITERM2_INTEGRATION}" && source "${ITERM2_INTEGRATION}"      # iTerm2 shell integration

# yum whatprovides
brew-whatprovides() {
  if [[ 0 -ne $# ]]; then
    _p="$*";
    # shellcheck disable=SC2086
    _realp="$(realpath ${_p})";
    while read -r pkg; do
      echo -ne "\r$(tput el)>> searching in ${pkg} ..."
      if brew list --verbose "${pkg}" 2>/dev/null | grep -q "${_realp}" >/dev/null 2>&1; then
        echo -ne "\r$(tput el)>> \033[0;32m${_p}\033[0m ( \033[0;37m${_realp}\033[0m ) provided by \033[0;33m${pkg}\033[0m";
        break;
      fi;
    done < <(brew leaves);
  fi
}

# # https://iterm2.com/documentation-scripting-fundamentals.html
# export LC_ALL=en_US.UTF-8
# function iterm2_print_user_vars() { iterm2_set_user_var gitBranch $(git symbolic-ref --short HEAD); }

# nvm
# disabled for issue -- nvm is not compatible with the "NPM_CONFIG_PREFIX" environment variable --
# [[ -d "$HOME/.nvm" ]] && export NPM_CONFIG_PREFIX="${NVM_DIR}"
[[ -d "$HOME/.nvm" ]] && export NVM_DIR="$HOME/.nvm"
# load nvm
[[ -s "${HOMEBREW_OPT}/nvm/nvm.sh"                    ]] && source "${HOMEBREW_OPT}/nvm/nvm.sh"
# load nvm bash_completion
[[ -s "${HOMEBREW_OPT}/nvm/etc/bash_completion.d/nvm" ]] && source "${HOMEBREW_OPT}/nvm/etc/bash_completion.d/nvm"

# vim:tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=sh
