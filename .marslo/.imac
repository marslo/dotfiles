#!/usr/bin/env bash
# shellcheck disable=SC2155,SC2034,SC1091,SC1090,SC2046,SC2086,SC2154
# =============================================================================
#   FileName: .imac
#     Author: marslo.jiao@gmail.com
#    Created: 2019-05-20 12:13:15
# LastChange: 2023-10-06 20:07:49
# =============================================================================
# export SHELLCHECK_OPTS="-e SC2181 -e SC2230 -e SC2086 -e SC2164"

# source $(brew --prefix git)/etc/bash_completion.d/git-prompt.sh
# BASH_COMPLETION_DIR="$(brew --prefix)"/etc/bash_completion.d
# ls "${BASH_COMPLETION_DIR}"/*git* >/dev/null 2>&1; [ $? -eq 0 ] && source "${BASH_COMPLETION_DIR}"/*git*

# if [[ -x /usr/bin/sw_vers ]] && /usr/bin/sw_vers | grep -E '\s*[mM]ac\s*OS\s*X?' >/dev/null; then
if [[ -x /usr/bin/sw_vers ]] && [[ 'macOS' = $(/usr/bin/sw_vers --productName) ]]; then
  # https://cloud.tencent.com/developer/article/1614039
  # export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles
  HOMEBREW_PREFIX="$(brew --prefix)"
  # HOMEBREW_BINS="/usr/local/bin"                                # added in /etc/paths
  HOMEBREW_BINS+=":/usr/local/sbin"

  OPENLDAP_HOME='/usr/local/opt/openldap'
  CURL_OPENSSL_HOME='/usr/local/opt/curl'                         # via: brew install curl-openssl (https://stackoverflow.com/a/49798271/2940319)
  OPENSSL_HOME='/usr/local/opt/openssl'                           # OPENSSL_HOME="$(brew --prefix openssl)"
  LIBRESSL_HOME='/usr/local/opt/libressl'
  GIT_EXTRAS='/usr/local/opt/git-extras'                          # GIT_EXTRAS="$(brew --prefix git-extras)"
  ICU4C_711='/usr/local/Cellar/icu4c@71.1/71.1'                   # '/usr/local/opt/icu4c@71.1'
  EXPAT_HOME='/usr/local/opt/expat'
  ZLIB_HOME='/usr/local/opt/zlib'
  LIBICONV_HOME='/usr/local/opt/libiconv'
  NCURSES_HOME='/usr/local/opt/ncurses'

  BINUTILS='/usr/local/opt/binutils'
  GNUBINHOME='/usr/local/opt/coreutils/libexec/gnubin'
  GNUMANHOME='/usr/local/opt/coreutils/libexec/gnuman'
  GNUWHICH='/usr/local/opt/gnu-which/libexec/gnubin'
  GNUGREP='/usr/local/opt/grep/libexec/gnubin'
  GNUGETOPT='/usr/local/opt/gnu-getopt/bin'
  GNUTAR='/usr/local/opt/gnu-tar/libexec/gnubin'
  GNUFIND='/usr/local/opt/findutils/libexec/gnubin'
  GNUINDENT='/usr/local/opt/gnu-indent/libexec/gnubin'
  GNUSED='/usr/local/opt/gnu-sed/libexec/gnubin'
  GNUMAKE='/usr/local/opt/make/libexec/gnubin'
  INETUTILS='/usr/local/opt/inetutils/libexec/gnubin'
  GUILE_TLS_CERTIFICATE_DIRECTORY='/usr/local/etc/gnutls/'
  UTIL_LINUX_HOME='/usr/local/opt/util-linux'

  KW_BUILD_TOOLS='/opt/kwbuildtools'
  MACVIM_HOME='/Applications/MacVim.app'
  # vim-tabnine
  LLVM_HOME="$(brew --prefix llvm)"

  TOOLS_PATH="${TOOLS_PATH:-}"
  test -d '/usr/local/vim'     && TOOLS_PATH+=':/usr/local/vim/bin'
  test -d "${KW_BUILD_TOOLS}"  && TOOLS_PATH+=":${KW_BUILD_TOOLS}/bin"
  test -d "$HOME/.docker"      && TOOLS_PATH+=":$HOME/.docker/bin"
  test -d "${MACVIM_HOME}"     && TOOLS_PATH+=":${MACVIM_HOME}/Contents/bin"
  test -d "${LLVM_HOME}"       && TOOLS_PATH+=":${LLVM_HOME}/bin"
  test -d "${UTIL_LINUX_HOME}" && TOOLS_PATH+=":${UTIL_LINUX_HOME}/bin"

  GNU_PATH="${GNU_PATH:-}"
  test -d "${GNUBINHOME}" && GNU_PATH+=":${GNUBINHOME}"
  test -d "${GNUWHICH}"   && GNU_PATH+=":${GNUWHICH}"
  test -d "${GNUGETOPT}"  && GNU_PATH+=":${GNUGETOPT}"
  test -d "${GNUGREP}"    && GNU_PATH+=":${GNUGREP}"
  test -d "${GNUTAR}"     && GNU_PATH+=":${GNUTAR}"
  test -d "${GNUFIND}"    && GNU_PATH+=":${GNUFIND}"
  test -d "${GNUINDENT}"  && GNU_PATH+=":${GNUINDENT}"
  test -d "${GNUSED}"     && GNU_PATH+=":${GNUSED}"
  test -d "${BINUTILS}"   && GNU_PATH+=":${BINUTILS}/bin"

  test -d '/opt/gradle/gradle-4.8' && GRADLE_HOME='/opt/gradle/gradle-4.8'
  if test -d '/opt/maven/apache-maven-3.5.0'; then
    M2_HOME='/opt/maven/apache-maven-3.5.0'
    M2=$M2_HOME/bin
    MAVEN_OPTS='-Xms512m -Xmx1G'
  fi
  if test -d '/opt/android'; then
    ANDROID_HOME='/opt/android'
    ANDROID_NDK_HOME="$ANDROID_HOME/android-ndk"
  fi

  # java 8
  #   JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.8.0_271.jdk/Contents/Home'
  # java 11                                                       # https://docs.oracle.com/en/java/javase/11/install/installation-jdk-macos.html
  #   JAVA_HOME=$(/usr/libexec/java_home -v 11)
  # java 21
  #   JAVA_HOME="$(brew --prefix java)"
  JAVA_HOME=$(/usr/libexec/java_home)
  # java 17
  #   JAVA_HOME=$(brew --prefix openjdk@17)                       # -> '/usr/local/opt/openjdk@17'
  GROOVY_HOME=$(brew --prefix groovy)/libexec                     # -> '/usr/local/opt/groovy/libexec'
  CLASSPATH=".:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$GROOVY_HOME/lib"
  # JAVA_OPTS+='-Dhttp.proxyHost=ipamunix.sample.com -Dhttp.proxyPort=8080'

  NODE_HOME='/usr/local/opt/node@21'                              # NODE_HOME='/usr/local/opt/node@12'
  MYSQL_HOME='/usr/local/mysql'
  ITERM2_ADDITIONAL="${HOME}/.iterm2"

  TCLTK_HOME='/usr/local/opt/tcl-tk'                              # -> "$(brew --prefix tcl-tk)"
  SQLITE_HOME='/usr/local/opt/sqlite'
  RUBY_HOME=$(brew --prefix ruby)
  RUBY_CONFIGURE_OPTS="--with-openssl-dir=${OPENSSL_HOME}"
  ED_HOME='/usr/local/opt/ed'

  PYTHON_VERSION='3.12'
  PYTHON_HOME=$(brew --prefix python@${PYTHON_VERSION})
  PYTHONPATH="/usr/local/lib/python${PYTHON_VERSION}/site-packages"
  PYTHONUSERBASE="$(${PYTHON_HOME}/libexec/bin/python -c 'import site; print(site.USER_BASE)')"   # PYTHONUSERBASE=$PYTHONPATH
  PYTHON_CONFIGURE_OPTS="--with-tcltk-includes='-I${TCLTK_HOME}/include' --with-tcltk-libs='-L${TCLTK_HOME}/lib -ltcl8.6 -ltk8.6'"

  SCRIPT_BINS="${SCRIPT_BINS:-}"
  test -d "${PYTHON_HOME}"    && SCRIPT_BINS+=":${PYTHON_HOME}/libexec/bin"
  test -d "${RUBY_HOME}"      && SCRIPT_BINS+=":${RUBY_HOME}/bin"
  test -d "${TCLTK_HOME}"     && SCRIPT_BINS+=":${TCLTK_HOME}/bin"
  test -d "${PYTHONUSERBASE}" && SCRIPT_BINS+=":${PYTHONUSERBASE}/bin"
  test -d "${NODE_HOME}"      && SCRIPT_BINS+=":${NODE_HOME}/bin"
  test -d "${JAVA_HOME}"      && SCRIPT_BINS+=":${JAVA_HOME}/bin"
  test -d "${GROOVY_HOME}"    && SCRIPT_BINS+=":${GROOVY_HOME}/bin"
  test -d "${ED_HOME}"        && SCRIPT_BINS+=":${ED_HOME}/libexec/gnubin"
  test -d "${ED_HOME}"        && SCRIPT_BINS+=":${ED_HOME}/bin"
  test -d "${RUBYGEM}"        && SCRIPT_BINS+=":${RUBYGEM}"
  test -d "${GIT_EXTRAS}"     && SCRIPT_BINS+=":${GIT_EXTRAS}/bin"
  # SCRIPT_BINS+=":${PYENV_ROOT}/bin"                             # shell: bash 3.2.57

  UTLS_PATH="${UTLS_PATH:-}"
  test -d '/usr/local/opt/gettext'      && UTLS_PATH+=':/usr/local/opt/gettext/bin'
  test -d '/usr/local/opt/file-formula' && UTLS_PATH+=':/usr/local/opt/file-formula/bin'
  test -d "${OPENLDAP_HOME}"            && UTLS_PATH+=":${OPENLDAP_HOME}/bin"
  test -d "${OPENLDAP_HOME}"            && UTLS_PATH+=":${OPENLDAP_HOME}/sbin"
  test -d "${CURL_OPENSSL_HOME}"        && UTLS_PATH+=":${CURL_OPENSSL_HOME}/bin"
  test -d "${EXPAT_HOME}"               && UTLS_PATH+=":${EXPAT_HOME}/bin"
  test -d "${OPENSSL_HOME}"             && UTLS_PATH+=":${OPENSSL_HOME}/bin"
  test -d "${LIBICONV_HOME}"            && UTLS_PATH+=":${LIBICONV_HOME}/bin"
  test -d "${INETUTILS}"                && UTLS_PATH+=":${INETUTILS}"

  SPECIAL_TOOLS="${SPECIAL_TOOLS:-}"
  test -d "${ICU4C_711}" && SPECIAL_TOOLS+=":${ICU4C_711}/bin"
  test -d "${ICU4C_711}" && SPECIAL_TOOLS+=":${ICU4C_711}/sbin"

  TEMP_PATH="${TOOLS_PATH}"
  TEMP_PATH+=":${HOMEBREW_BINS}"
  TEMP_PATH+=":${GNU_PATH}"
  TEMP_PATH+=":${SCRIPT_BINS}"
  TEMP_PATH+=":${UTLS_PATH}"
  test -d "${SQLITE_HOME}"       && TEMP_PATH+=":${SQLITE_HOME}/bin"
  test -d "${ITERM2_ADDITIONAL}" && TEMP_PATH+=":${ITERM2_ADDITIONAL}"

  PATH="$SPECIAL_TOOLS:$TEMP_PATH:$PATH"

  # eval "$(/usr/libexec/path_helper)"
  export JAVA_HOME GROOVY_HOME PATH
  export GUILE_TLS_CERTIFICATE_DIRECTORY PYTHONPATH PYTHONUSERBASE CLASSPATH RUBY_CONFIGURE_OPTS
  # export JAVA_OPTS

  # export HOMEBREW_GITHUB_API_TOKEN="80cf3215764805c0d385ecb7ac7c6c87df799424"
  export HOMEBREW_INSTALL_BADGE='☕️ 🐸'
fi

# alias after PATH
for _i in $( /bin/ls -1 ${iRCHOME}/.alias ); do
  source "${iRCHOME}/.alias/${_i}"
done
unset _i

# yum whatprovides
brew-whatprovides() {
  if [[ 0 -ne $# ]]; then
    _p="$*";
    # shellcheck disable=SC2086
    _realp="$(realpath ${_p})";
    while read -r pkg; do
      echo -ne "\r$(tput el)>> searching in ${pkg} ..."
      if brew list --verbose "${pkg}" 2>/dev/null | grep "${_realp}" >/dev/null 2>&1; then
        echo -ne "\r$(tput el)>> \033[0;32m${_p}\033[0m ( \033[0;37m${_realp}\033[0m ) provided by \033[0;33m${pkg}\033[0m";
        break;
      fi;
    done < <(brew leaves);
  fi
}

# vim:tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=sh
