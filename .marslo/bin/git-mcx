#!/usr/bin/env bash
# shellcheck source=/dev/null
#=============================================================================
#     FileName : git-mcx
#       Author : marslo.jiao@gmail.com
#      Created : 2025-03-21 01:32:35
#   LastChange : 2025-04-23 18:04:38
#        Usage : git-mcx [OPTION]             # call getCommitMessage to set commit message
#                git-mcx [OPTION] [message]   # using `[message]` as commit message
#=============================================================================

# |     ENVIRONMENT     |          DESCRIPTION         | DEFAULT  |
# | --------------------| -----------------------------| ---------|
# | MCX_ENABLE_SCOPE    | is enable commit scope       | true     |
# | MCX_LINT_ENABLE     | is enable commit lint        | true     |
# | MCX_ENABLE_BODY     | is enable commit body        | false    |
# | MCX_ENABLE_FOOTER   | is enable commit footer      | false    |
# | MCX_BREAKING_CHANGE | is enable breaking change    | false    |
# | MCX_SHOW_PREVIEW    | is show commit preview       | false    |
# | MCX_SHOW_DIFF       | is show diff after commit    | false    |
# | MCX_GLOBAL_LINTRC   | force using global commitlint| false    |

set -euo pipefail

# @credit: https://github.com/ppo/bash-colors
# @usage:  or copy & paste the `c()` function from:
#          https://github.com/ppo/bash-colors/blob/master/bash-colors.sh#L3
if [[ -f "${HOME}/.marslo/bin/bash-color.sh" ]]; then
  source "${HOME}/.marslo/bin/bash-color.sh"
else
  c() { :; }
fi

function showHelp() { echo -e "${USAGE}"; }
function die() { echo -e "$(c Ri)ERROR$(c)$(c i): $*.$(c) $(c Wdi)exit ...$(c)" >&2; exit 1; }

if [[ -f "$(dirname "${BASH_SOURCE[0]:-$0}")"/getCommitMessage.sh ]]; then
  source "$(dirname "${BASH_SOURCE[0]:-$0}")"/getCommitMessage.sh
else
  die "$(c M)'getCommitMessage.sh'$(c 0i) not found. download from https://github.com/marslo/dotfiles/raw/main/.marslo/bin/getCommitMessage.sh first. $(c)"
fi

# shellcheck source=/dev/null disable=SC2155
declare -r ME="$(basename "${BASH_SOURCE[0]:-$0}" | sed 's/-/ /g')"
# flag
declare MCX_ENABLE_SCOPE="${MCX_ENABLE_SCOPE:-true}"
declare MCX_LINT_ENABLE="${MCX_LINT_ENABLE:-true}"
declare MCX_ENABLE_BODY="${MCX_ENABLE_BODY:-false}"
declare MCX_ENABLE_FOOTER="${MCX_ENABLE_FOOTER:-false}"
declare MCX_SHOW_PREVIEW="${MCX_SHOW_PREVIEW:-false}"
declare MCX_SHOW_DIFF="${MCX_SHOW_DIFF:-false}"
declare MCX_GLOBAL_LINTRC="${MCX_GLOBAL_LINTRC:-false}"
declare MCX_ENABLE_JIRA="${MCX_ENABLE_JIRA:-false}"
declare MCX_BREAKING_CHANGE="${MCX_BREAKING_CHANGE:-false}"
declare LINTRC_FILE="${HOME}/.commitlintrc.js"
# shellcheck source=/dev/null disable=SC2155
declare -r USAGE="""
NAME
  $(c Ys)${ME}$(c) - $(c Ysi)m$(c)arslo $(c Ysi)c$(c)ommit pro ma$(c Ysi)x$(c) - Git commit message helper

USAGE
  $(c Ys)\$ ${ME} $(c 0Wdi)[$(c 0Gi)options$(c 0Wdi)] $(c 0Wdi)[$(c 0Mi)'message'$(c 0Wdi)]$(c)

OPTIONS
  $(c Gi)--body$(c), $(c Gi)--no-body$(c 0Y)*$(c)                   enable/disable the commit message body section
  $(c Gi)--footer$(c), $(c Gi)--no-footer$(c 0Y)*$(c)               enable/disable the footer section $(c i)(e.g.: $(c W)issue refs, $(c 0Wi)breaking changes$(c 0i))$(c)
  $(c Gi)--diff$(c), $(c Gi)--no-diff$(c 0Y)*$(c)                   show/suppress Git diff preview $(c i)(if applicable)$(c)
  $(c Gi)--preview$(c), $(c Gi)--no-preview$(c 0Y)*$(c)             enable/disable full preview of the final commit message
  $(c Gi)--scope$(c 0Y)*$(c), $(c Gi)--no-scope$(c)                 prompt/skip for Conventional Commit 'scope' input
  $(c Gi)--lint$(c 0Y)*$(c), $(c Gi)--no-lint$(c)                   enable/disable commit message linting $(c i)(via commitlint - if applicable)$(c)

  $(c Gi)--global-lintrc$(c), $(c Gi)--no-global-lintrc$(c 0Y)*$(c) force use/disable global commitlint configuration ($(c i)default: $(c M)~/.commitlintrc$(c))
  $(c Gi)--lintrc $(c 0Wi)<file>$(c)                      specify a custom commitlint configuration file
                                       example: $(c Gi)--lintrc $(c 0Wi)\"\$HOME/path/to/.commitlintrc.json\"$(c)

  $(c Gi)--breaking$(c), $(c Gi)--breaking-change$(c)        enable breaking change section $(c i)(e.g.: $(c W)BREAKING CHANGE: $(c 0Wi)description$(c 0i))$(c)
  $(c Gi)-h$(c), $(c Gi)--help$(c)                           show this help message and exit

EXAMPLES
  $(c Ys)\$ ${ME} $(c 0Mi)'message'$(c 0Gi)            $(c 0Wdi)# commit directly$(c)
  $(c Ys)\$ ${ME} $(c 0Bi)--$(c 0Gi) --help            $(c 0Wdi)# show help$(c)
  $(c Ys)\$ ${ME} $(c 0Gi)--body --footer --diff --lint$(c)
  $(c Ys)\$ ${ME} $(c 0Gi)--no-preview --no-scope --lintrc $(c 0Wi)./custom-lintrc.json$(c)
  $(c Ys)\$ ${ME} $(c 0Gi)--no-lint --no-footer --no-body$(c)
"""

while [[ $# -gt 0 ]]; do
  case $1 in
    --no-body                      ) MCX_ENABLE_BODY=false   ; shift     ;;
    --body                         ) MCX_ENABLE_BODY=true    ; shift     ;;
    --no-footer                    ) MCX_ENABLE_FOOTER=false ; shift     ;;
    --footer                       ) MCX_ENABLE_FOOTER=true  ; shift     ;;
    --diff                         ) MCX_SHOW_DIFF=true      ; shift     ;;
    --no-diff                      ) MCX_SHOW_DIFF=false     ; shift     ;;
    --preview                      ) MCX_SHOW_PREVIEW=true   ; shift     ;;
    --no-preview                   ) MCX_SHOW_PREVIEW=false  ; shift     ;;
    --scope                        ) MCX_ENABLE_SCOPE=true   ; shift     ;;
    --no-scope                     ) MCX_ENABLE_SCOPE=false  ; shift     ;;
    --lint                         ) MCX_LINT_ENABLE=true    ; shift     ;;
    --no-lint                      ) MCX_LINT_ENABLE=false   ; shift     ;;
    --lintrc                       ) LINTRC_FILE="$2"        ; shift 2   ;;
    --global-lintrc                ) MCX_GLOBAL_LINTRC=true  ; shift     ;;
    --no-global-lintrc             ) MCX_GLOBAL_LINTRC=false ; shift     ;;
    --breaking | --breaking-change ) MCX_BREAKING_CHANGE=true; shift     ;;
    -j | --jira                    ) MCX_ENABLE_JIRA=true    ; shift     ;;
    --                             ) shift                               ;;
    -h | --help                    ) showHelp                ; exit 0    ;;
    -*                             ) die "$(c i)Unknown option: $(c M)'$1'$(c 0i). try$(c) $(c Gi)\`\$ ${ME} -- --help\`$(c)" ;;
    *                              ) break ;;
  esac
done

function main() {
  if [[ $# -gt 0 ]]; then
    message="$1"
  else
    message="$(getCommitMessage)" || exit 0
  fi

  # show preview
  if [[ 'true' = "${MCX_SHOW_PREVIEW:-false}" ]]; then
    echo -e "-------------- $(c Wdi)git message preview$(c) ----------------"
    printf  "%s\n" "${message}" | command bat --plain --language=COMMIT_EDITMSG --style=plain
    echo -e '---------------------------------------------------'
  fi

  if [[ 'true' = "${MCX_SHOW_DIFF:-false}" ]]; then
    echo -e "\nGit Diff (staged):"
    printf "\n%b\n" "$(c Bi)git diff :$(c)"
    git diff --cached --color || printf "%b\n" "$(c Wdi)(no staged changes)$(c)"
  fi

  # commitlint check
  if command -v commitlint >/dev/null 2>&1 && [[ 'true' = "${MCX_LINT_ENABLE:-true}" ]]; then
    [[ 'true' = "${MCX_GLOBAL_LINTRC:-false}" ]] \
      && CONFIG_OPT="--config '${LINTRC_FILE}'" \
      || CONFIG_OPT=''
    printf "%b\n" "$(c Yi)commitlint checking ...$(c)"
    # shellcheck disable=SC2086
    echo "${message}" | commitlint ${CONFIG_OPT} || { printf "%b\n" "$(c Ri)commitlint failed ... $(c)"; }
  fi

  git add --all "$(git rev-parse --show-toplevel)";
  printf "%s\n" "${message}" | git commit -s -a -F -
}

main "$@"

# vim:tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=sh:
