#!/usr/bin/env bash
# shellcheck source=/dev/null
#=============================================================================
#     FileName : ansi2hex
#       Author : marslo.jiao@gmail.com
#      Created : 2025-03-24 14:30:33
#   LastChange : 2025-03-31 11:22:01
#=============================================================================

source "${HOME}"/.marslo/bin/bash-color.sh

declare isPreview=false
declare noColor=false
declare showHelp=false
declare style=''
declare alpha=''
declare -a indices=()
# shellcheck disable=SC2155
declare help="""
NAME
  $(c Ys)ansi2hex$(c) - convert ANSI color index to HEX color code

SYNOPSIS
  $(c Ys)\$ ansi2hex$(c) $(c Gi)<index>...$(c) [$(c Gi)style$(c)] [$(c Gis)--alpha=$(c)$(c Mi)<float>$(c)] [$(c Gis)--no-color$(c)]
  $(c Ys)\$ ansi2hex$(c) $(c Gis)--preview$(c) [$(c Gi)style$(c)] [$(c Gis)--alpha=$(c)$(c Mi)<float>$(c)] [$(c Gis)--no-color$(c)]

ARGUMENTS
  $(c Gi)<index>$(c)              one or more ANSI color indices ($(c Wdi)0$(c) ~ $(c Wdi)255$(c))
  $(c Gi)style$(c)                optional color style: $(c Mi)normal$(c) (default), $(c Mi)dim$(c), $(c Mi)bright$(c), $(c Mi)bold$(c), $(c Mi)light$(c)
  $(c Gis)--alpha=$(c)$(c Mi)<float>$(c)      brightness adjustment factor (overrides style), e.g., $(c Wi)0.65$(c) ($(c Mi)dim$(c)), $(c Wi)1.35$(c) ($(c Mi)bright$(c))
  $(c Gis)--no-color$(c)           disable colorized output
  $(c Gis)--preview$(c)            show all 256 ANSI colors with the specified style and alpha
  $(c Gis)--help$(c), $(c Gis)-h$(c)           show this help message

VALIDATION
  - Each $(c Wd)<index>$(c) must be an integer between 0 and 255.
  - Unknown arguments will result in an error.
  - Multiple indices and options can be combined.

EXAMPLES
  $(c Yis)\$ ansi2hex$(c) $(c Gi)213$(c) $(c Gi)45$(c) $(c Gi)100$(c)
  $(c Yis)\$ ansi2hex$(c) $(c Gi)213$(c) $(c Mi)dim$(c)
  $(c Yis)\$ ansi2hex$(c) $(c Gi)213$(c) $(c Gi)45$(c) $(c Gi)--alpha=$(c)$(c Mi)1.15$(c)
  $(c Yis)\$ ansi2hex$(c) $(c Gi)--preview$(c) $(c Mi)dim$(c)
  $(c Yis)\$ ansi2hex$(c) $(c Gi)--preview$(c) $(c Gi)--alpha=$(c)$(c Wi)0.85$(c) $(c Gi)--no-color$(c)
"""

function isValidIndex() {
  [[ "$1" =~ ^[0-9]+$ && "$1" -ge 0 && "$1" -le 255 ]]
}

# parse args
while [[ $# -gt 0 ]]; do
  case "$1" in
    --alpha=*                    ) alpha="${1#--alpha=}" ;  shift ;;
    --preview                    ) isPreview=true        ;  shift ;;
    --no-color                   ) noColor=true          ;  shift ;;
    --help|-h                    ) showHelp=true         ;  shift ;;
    dim|bright|bold|light|normal ) style="$1"            ;  shift ;;
    [0-9]*                       ) if isValidIndex "$1"; then
                                     indices+=("$1")
                                   else
                                     echo "Invalid color index: $1" >&2
                                     exit 1
                                   fi
                                   shift
                                   ;;
    *                            ) showUsage             ; exit 0  ;;
  esac
done

# normalize style
case "$style" in
  bright|bold|light ) style="bright" ;;
  dim               ) style="dim"    ;;
  *                 ) style="normal" ;;
esac

# set default alpha if not provided
if [[ -z "$alpha" ]]; then
  case "$style" in
    dim    ) alpha=0.65 ;;
    bright ) alpha=1.35 ;;
    *      ) alpha=1.0  ;;
  esac
fi

# brightness adjustment
adjust() {
  local val="$1"
  awk -v v="$val" -v a="$alpha" 'BEGIN {
    if (a < 1.0)
      printf "%d", v * a
    else if (a > 1.0)
      printf "%d", v + (255 - v) * (a - 1)
    else
      print v
  }'
}

# convert ansi index to rgb
ansiToRgb() {
  local idx="$1"
  local r g b

  if (( idx < 16 )); then
    local colors=(
      0 0 0       128 0 0     0 128 0     128 128 0
      0 0 128     128 0 128   0 128 128   192 192 192
      128 128 128 255 0 0     0 255 0     255 255 0
      0 0 255     255 0 255   0 255 255   255 255 255
    )
    r=${colors[idx*3]}
    g=${colors[idx*3+1]}
    b=${colors[idx*3+2]}
  elif (( idx >= 16 && idx <= 231 )); then
    local base=$(( idx - 16 ))
    local r6=$(( base / 36 ))
    local g6=$(( (base % 36) / 6 ))
    local b6=$(( base % 6 ))

    r=$(( r6 == 0 ? 0 : r6 * 40 + 55 ))
    g=$(( g6 == 0 ? 0 : g6 * 40 + 55 ))
    b=$(( b6 == 0 ? 0 : b6 * 40 + 55 ))
  else
    local gray=$(( 8 + (idx - 232) * 10 ))
    r=$gray; g=$gray; b=$gray
  fi

  r=$(adjust "$r")
  g=$(adjust "$g")
  b=$(adjust "$b")

  echo "$r $g $b"
}

# RGB to HEX
rgbToHex() {
  printf "#%02X%02X%02X\n" "$1" "$2" "$3"
}

# print function
printColorInfo() {
  local idx="$1"
  read -r r g b <<< "$(ansiToRgb "$idx")"
  local hex
  hex=$(rgbToHex "$r" "$g" "$b")

  if ${noColor}; then
    printf "%3s => rgba(%3d, %3d, %3d, %.2f) => %s\n" "$idx" "$r" "$g" "$b" "$alpha" "$hex"
  else
    local ansi_color="\033[38;5;${idx}m"
    local truecolor="\033[38;2;${r};${g};${b}m"
    local reset="\033[0m"
    printf "${ansi_color}%3s${reset} => ${truecolor}rgba(%3d, %3d, %3d, %.2f)${reset} => ${truecolor}%s${reset}\n" \
      "$idx" "$r" "$g" "$b" "$alpha" "$hex"
  fi
}

showUsage() { echo -e "${help}"; exit 0; }

if [[ "$showHelp" == true ]]; then
  showUsage
fi

if ${isPreview}; then
  for i in {0..255}; do
    printColorInfo "$i"
  done
  exit 0
fi

# if no index provided
if [[ ${#indices[@]} -eq 0 ]]; then
  showUsage
fi

# loop over indices
for idx in "${indices[@]}"; do
  printColorInfo "$idx"
done

# vim: tabstop=2 softtabstop=2 shiftwidth=2 expandtab filetype=sh:
