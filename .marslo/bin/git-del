#!/usr/bin/env bash
# shellcheck source=/dev/null
#=============================================================================
#     FileName : git-del
#       Author : marslo.jiao@gmail.com
#      Created : 2023-12-14 17:55:55
#   LastChange : 2025-03-05 17:25:16
#  Description : delete branch or tag from remote and local
#                -  - E0A0/E725
#=============================================================================

source "$HOME"/.marslo/bin/bash-color.sh

declare branches
declare tags
declare remoteOnly='false'
declare findBr=0
declare findTag=0
declare remoteRef=''

while [[ $# -gt 0 ]]; do
  case "$1" in
    -r | --remote ) remoteOnly='true'; shift ;;
                * ) break                    ;;
  esac
done

git fetch --tags --prune --prune-tags --quiet

branches=$(git for-each-ref refs/remotes refs/heads --sort=-committerdate --format='%(refname:short)')
tags=$(git for-each-ref refs/tags --sort=-committerdate --format='%(refname:lstrip=1)')

plogs="git --no-pager log --color --graph --pretty=tformat:'%C(6)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cr) %C(blue)<%an>%C(reset)' --abbrev-commit --date=relative"
gpreview="git show --color=always {-1}"
refname=$( ( echo "${branches}"; echo "${tags}" ) |
             fmt -1 |
             grep --color=never -v 'origin$' |
             fzf -0 +m --prompt=' ' \
                 --preview "${plogs}" \
                 --height 50% --min-height 10+ \
                 --style full --no-input-border \
                 --preview-window=right,65%,nofollow --preview-label-pos='bottom' \
                 --bind "ctrl-o:execute(${gpreview})+change-preview(${gpreview} -s)+change-prompt( )" \
                 --bind 'ctrl-/:change-preview-window:up,60%|hidden|right,65%' |
             sed -rn "s:\s*(origin/)?(.*)$:\2:p"
        );
[[ -z "${refname}" ]] && exit;

name=$(sed -re 's:^(refs/)?(heads/)?(tags/)?(remotes/)?(origin/)?(.*)$:\6:' <<< "${refname}");

for refsR in ${branches} ${tags}; do
  [[ "origin/${name}" = "${refsR}" ]] && remoteRef='branch' && break
  [[ "tags/${name}"   = "${refsR}" ]] && remoteRef='tag'    && break
done
for branch in ${branches}; do
  [[ "${name}" = "${branch}" ]] && findBr=1  && break
done
for tag in $(git --no-pager tag -l); do
  [[ "${name}" = "${tag}"    ]] && findTag=1 && break
done;

# delete remote
if [[ -n "${remoteRef}" ]]; then
  git push origin --delete "${name}";
  echo -e "$(c Wd)>>$(c) $(c Wdi)${remoteRef}$(c) $(c Mis)origin/${name}$(c) $(c Wdi)removed from remote ..$(c)"
else
  echo -e "$(c Wd)>>$(c) $(c Mis)origin/${name}$(c) $(c Wdi)cannot be found in remote ..$(c)"
fi;

# delete local
if [[ 'false' = "${remoteOnly}" ]]; then
  if [[ 1 = "${findBr}" ]]; then
    git branch -D "${name}";
    echo -e "$(c Wd)>>$(c) $(c Wdi)branch :$(c) $(c Mis)${name}$(c) $(c Wdi)removed from local ..$(c)"
  elif [ 1 = "${findTag}" ]; then
    git tag -d "${name}";
    echo -e "$(c Wd)>>$(c) $(c Wdi)tag :$(c) $(c Mis)${name}$(c) $(c Wdi)removed from local ..$(c)"
  else
    echo -e "$(c Wd)>>$(c) $(c Mis)${name}$(c) $(c Wdi)cannot be found in local ..$(c)"
  fi;
fi

# vim:tabstop=2:softtabstop=2:shiftwidth=2:expandtab:filetype=sh
